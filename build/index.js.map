{"version":3,"sources":["webpack://CodePath/webpack/universalModuleDefinition","webpack://CodePath/webpack/bootstrap","webpack://CodePath/./node_modules/opentracing/lib/index.js","webpack://CodePath/./node_modules/@babel/runtime/helpers/defineProperty.js","webpack://CodePath/./node_modules/@babel/runtime/helpers/assertThisInitialized.js","webpack://CodePath/./node_modules/opentracing/lib/span.js","webpack://CodePath/./node_modules/@babel/runtime/helpers/classCallCheck.js","webpack://CodePath/./node_modules/@babel/runtime/helpers/createClass.js","webpack://CodePath/./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js","webpack://CodePath/./node_modules/@babel/runtime/helpers/getPrototypeOf.js","webpack://CodePath/./node_modules/@babel/runtime/helpers/inherits.js","webpack://CodePath/./node_modules/opentracing/lib/noop.js","webpack://CodePath/./node_modules/opentracing/lib/tracer.js","webpack://CodePath/./node_modules/opentracing/lib/span_context.js","webpack://CodePath/./node_modules/opentracing/lib/functions.js","webpack://CodePath/./node_modules/opentracing/lib/constants.js","webpack://CodePath/./node_modules/opentracing/lib/reference.js","webpack://CodePath/./node_modules/opentracing/lib/mock_tracer/mock_context.js","webpack://CodePath/./node_modules/opentracing/lib/mock_tracer/mock_span.js","webpack://CodePath/./node_modules/opentracing/lib/binary_carrier.js","webpack://CodePath/./node_modules/opentracing/lib/ext/tags.js","webpack://CodePath/./node_modules/opentracing/lib/mock_tracer/index.js","webpack://CodePath/./node_modules/opentracing/lib/mock_tracer/mock_tracer.js","webpack://CodePath/./node_modules/opentracing/lib/mock_tracer/mock_report.js","webpack://CodePath/./node_modules/opentracing/lib/global_tracer.js","webpack://CodePath/./node_modules/@babel/runtime/helpers/typeof.js","webpack://CodePath/./node_modules/@babel/runtime/helpers/setPrototypeOf.js","webpack://CodePath/./src/codePathTracer.js","webpack://CodePath/./src/codePathStream.js","webpack://CodePath/./src/codePathScopeManager.js","webpack://CodePath/./src/codePath.js","webpack://CodePath/./src/codePathModel.js","webpack://CodePath/./src/codePathSearchModel.js","webpack://CodePath/./src/treeGrid.js","webpack://CodePath/./src/index.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__export","binary_carrier_1","BinaryCarrier","default","Tags","Noop","reference_1","Reference","span_1","Span","span_context_1","SpanContext","tracer_1","Tracer","mock_tracer_1","MockTracer","initialize","obj","configurable","writable","self","ReferenceError","noop","context","this","_context","tracer","_tracer","setOperationName","_setOperationName","setBaggageItem","_setBaggageItem","getBaggageItem","_getBaggageItem","setTag","_a","_addTags","addTags","keyValueMap","log","keyValuePairs","timestamp","_log","logEvent","eventName","payload","event","finish","finishTime","_finish","spanContext","instance","Constructor","TypeError","_defineProperties","target","props","length","descriptor","protoProps","staticProps","_typeof","assertThisInitialized","_getPrototypeOf","setPrototypeOf","getPrototypeOf","__proto__","subClass","superClass","constructor","span","Functions","startSpan","options","childOf","references","push","_startSpan","inject","format","carrier","_inject","extract","_extract","fields","toTraceId","toSpanId","Constants","REFERENCE_CHILD_OF","followsFrom","REFERENCE_FOLLOWS_FROM","FORMAT_BINARY","FORMAT_TEXT_MAP","FORMAT_HTTP_HEADERS","type","referencedContext","_type","_referencedContext","extendStatics","__extends","b","Array","__","MockContext","_super","_this","_span","opentracing","mock_context_1","MockSpan","_mockTracer","_uuid","_generateUUID","_startMs","Date","now","_finishMs","_operationName","_tags","_logs","set","_i","keys_1","keys","uuid","operationName","durationMs","tags","Math","abs","random","toString","substr","addReference","ref","debug","operation","millis","buffer","SPAN_KIND","SPAN_KIND_RPC_CLIENT","SPAN_KIND_RPC_SERVER","SPAN_KIND_MESSAGING_PRODUCER","SPAN_KIND_MESSAGING_CONSUMER","ERROR","COMPONENT","SAMPLING_PRIORITY","PEER_SERVICE","PEER_HOSTNAME","PEER_ADDRESS","PEER_HOST_IPV4","PEER_HOST_IPV6","PEER_PORT","HTTP_URL","HTTP_METHOD","HTTP_STATUS_CODE","MESSAGE_BUS_DESTINATION","DB_INSTANCE","DB_STATEMENT","DB_TYPE","DB_USER","mock_span_1","mock_report_1","_spans","_allocSpan","_startStack","Error","stack","clear","report","MockReport","spans","spansByUUID","spansByTag","debugSpans","unfinishedSpans","forEach","val","firstSpanWithTagValue","noopTracer","_globalTracer","globalTracerDelegate","GlobalTracerDelegate","apply","arguments","initGlobalTracer","globalTracer","_typeof2","iterator","_setPrototypeOf","createCodePathTracer","traceId","stream","CodePathTracer","_traceId","_nextSpanId","_clock","clock","_scopeManager","scopeManager","_stream","writeStartTracer","CodePathSpan","CodePathSpanContext","spanId","getTraceId","_selfContext","startTime","undefined","findReferences","writeStartSpan","contextToPlain","writeSpanTags","time","writeLog","$id","effectiveFinishTime","writeEndSpan","_spanId","plainToContext","createCodePathStream","entries","isEnabled","enabled","token","messageId","enable","peekEntries","takeEntries","copyOfEntries","currentScopeManager","createInternalScopeManager","trace","promiseOrFunc","callerScopeManager","clone","originalPromise","saveScopeManager","wrapperPromise","Promise","resolve","reject","then","err","createDefaultScopeManager","getActiveTracer","getActiveSpan","setActiveTracer","setActiveSpan","resetCurrentScope","source","activeTracer","activeSpan","thisScopeManager","LOG_LEVEL","warning","error","critical","createRealLowResolutionClock","getTime","defaultTracerFactory","createCodePath","tracerFactory","outputStream","spanEntries","logToActiveSpan","existingSpan","tempSpan","id","parentContext","parentReferenceType","existingTracer","newTracer","getOrCreateActiveTracer","parentReferenceContext","getParentSpanContext","spanOptions","childSpan","childSpanId","thisCodePath","logDebug","level","logWarning","logError","logCritical","spanRoot","spanChild","spanFollower","finishSpan","doesNotifyTracerOnFinish","notifySpanFinished","entry","parentEntry","input","output","createCodePathModel","mapByTraceId","getOrAddTraceSpanNodeMap","traceNodeMap","existingMap","nodeBySpanId","newMap","getSpanNode","setSpanNode","node","rootNode","createRootNode","nextNodeId","subscriber","insertNode","parent","getParentContext","parentNode","console","warn","findParentNode","newNode","createRegularNode","appendChildNodeToParent","getRootNode","getNodesFlat","getNodesAsFlatArray","publish","insertedNodes","filter","map","subscribe","callback","unsubscribe","clearAllRows","depth","firstChild","lastChild","prevSibling","nextSibling","newChild","flatNodes","pushSubTreeNodes","subNode","createCodePathSearchModel","sourceModel","predicate","resultNodeById","newlyCreatedResultNodes","resultRootNode","sourceRootNode","depthFirstSearchSubTree","getResultParentNode","createThisResultNode","matched","createResultNode","isRootNode","thisNodeMatched","thisResultNode","performSearch","sourceNode","getOrCreateResultParentNode","sourceChildNode","existingParent","resultParentNode","resultNode","createTreeGridController","view","model","rowById","masterIndexVersion","controller","toggle","expand","collapse","getIsExpanded","getIsVisible","replaceModel","newModel","initWithCurrentModel","clearAll","subTreeHeight","getNode","getParent","getPrevSibling","getNextSibling","getFirstChild","getSubTreeHeight","updateSubTreeHeight","delta","getIndexVersion","findAbsoluteIndex","showSubNodes","subNodes","createSubNodesRowControllers","insertNodes","createRootNodeController","onNodeSelected","attachController","row","createRowController","isExpanded","cachedAbsoluteIndex","cachedIndexVersion","indexRelativeToParent","sibling","parentAbsoluteIndex","thisRowIndex","updateNode","removeNodes","hideSubNodes","currentGroup","parentId","beginNewGroup","index","endCurrentGroup","startIndex","parentRow","nodesInGroup","slice","createTreeGridView","table","columns","tbody","document","createElement","appendChild","nodeSelectedCallback","stringToTextNode","element","createTextNode","renderCell","rowIndex","colIndex","tr","td","htmlNode","theController","rows","cells","innerHTML","nodes","insertRow","onclick","insertCell","count","deleteRow","newTbody","replaceChild"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"CodePath\"] = factory();\n\telse\n\t\troot[\"CodePath\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 25);\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar binary_carrier_1 = require(\"./binary_carrier\");\nexports.BinaryCarrier = binary_carrier_1.default;\nvar Tags = require(\"./ext/tags\");\nexports.Tags = Tags;\nvar Noop = require(\"./noop\");\nvar reference_1 = require(\"./reference\");\nexports.Reference = reference_1.default;\nvar span_1 = require(\"./span\");\nexports.Span = span_1.default;\nvar span_context_1 = require(\"./span_context\");\nexports.SpanContext = span_context_1.default;\nvar tracer_1 = require(\"./tracer\");\nexports.Tracer = tracer_1.Tracer;\nvar mock_tracer_1 = require(\"./mock_tracer\");\nexports.MockTracer = mock_tracer_1.MockTracer;\n__export(require(\"./global_tracer\"));\n__export(require(\"./constants\"));\n__export(require(\"./functions\"));\n// Initialize the noops last to avoid a dependecy cycle between the classes.\nNoop.initialize();\n//# sourceMappingURL=index.js.map","function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty;","function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nmodule.exports = _assertThisInitialized;","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar noop = require(\"./noop\");\n/**\n * Span represents a logical unit of work as part of a broader Trace. Examples\n * of span might include remote procedure calls or a in-process function calls\n * to sub-components. A Trace has a single, top-level \"root\" Span that in turn\n * may have zero or more child Spans, which in turn may have children.\n */\nvar Span = /** @class */ (function () {\n    function Span() {\n    }\n    // ---------------------------------------------------------------------- //\n    // OpenTracing API methods\n    // ---------------------------------------------------------------------- //\n    /**\n     * Returns the SpanContext object associated with this Span.\n     *\n     * @return {SpanContext}\n     */\n    Span.prototype.context = function () {\n        return this._context();\n    };\n    /**\n     * Returns the Tracer object used to create this Span.\n     *\n     * @return {Tracer}\n     */\n    Span.prototype.tracer = function () {\n        return this._tracer();\n    };\n    /**\n     * Sets the string name for the logical operation this span represents.\n     *\n     * @param {string} name\n     */\n    Span.prototype.setOperationName = function (name) {\n        this._setOperationName(name);\n        return this;\n    };\n    /**\n     * Sets a key:value pair on this Span that also propagates to future\n     * children of the associated Span.\n     *\n     * setBaggageItem() enables powerful functionality given a full-stack\n     * opentracing integration (e.g., arbitrary application data from a web\n     * client can make it, transparently, all the way into the depths of a\n     * storage system), and with it some powerful costs: use this feature with\n     * care.\n     *\n     * IMPORTANT NOTE #1: setBaggageItem() will only propagate baggage items to\n     * *future* causal descendants of the associated Span.\n     *\n     * IMPORTANT NOTE #2: Use this thoughtfully and with care. Every key and\n     * value is copied into every local *and remote* child of the associated\n     * Span, and that can add up to a lot of network and cpu overhead.\n     *\n     * @param {string} key\n     * @param {string} value\n     */\n    Span.prototype.setBaggageItem = function (key, value) {\n        this._setBaggageItem(key, value);\n        return this;\n    };\n    /**\n     * Returns the value for a baggage item given its key.\n     *\n     * @param  {string} key\n     *         The key for the given trace attribute.\n     * @return {string}\n     *         String value for the given key, or undefined if the key does not\n     *         correspond to a set trace attribute.\n     */\n    Span.prototype.getBaggageItem = function (key) {\n        return this._getBaggageItem(key);\n    };\n    /**\n     * Adds a single tag to the span.  See `addTags()` for details.\n     *\n     * @param {string} key\n     * @param {any} value\n     */\n    Span.prototype.setTag = function (key, value) {\n        var _a;\n        // NOTE: the call is normalized to a call to _addTags()\n        this._addTags((_a = {}, _a[key] = value, _a));\n        return this;\n    };\n    /**\n     * Adds the given key value pairs to the set of span tags.\n     *\n     * Multiple calls to addTags() results in the tags being the superset of\n     * all calls.\n     *\n     * The behavior of setting the same key multiple times on the same span\n     * is undefined.\n     *\n     * The supported type of the values is implementation-dependent.\n     * Implementations are expected to safely handle all types of values but\n     * may choose to ignore unrecognized / unhandle-able values (e.g. objects\n     * with cyclic references, function objects).\n     *\n     * @return {[type]} [description]\n     */\n    Span.prototype.addTags = function (keyValueMap) {\n        this._addTags(keyValueMap);\n        return this;\n    };\n    /**\n     * Add a log record to this Span, optionally at a user-provided timestamp.\n     *\n     * For example:\n     *\n     *     span.log({\n     *         size: rpc.size(),  // numeric value\n     *         URI: rpc.URI(),  // string value\n     *         payload: rpc.payload(),  // Object value\n     *         \"keys can be arbitrary strings\": rpc.foo(),\n     *     });\n     *\n     *     span.log({\n     *         \"error.description\": someError.description(),\n     *     }, someError.timestampMillis());\n     *\n     * @param {object} keyValuePairs\n     *        An object mapping string keys to arbitrary value types. All\n     *        Tracer implementations should support bool, string, and numeric\n     *        value types, and some may also support Object values.\n     * @param {number} timestamp\n     *        An optional parameter specifying the timestamp in milliseconds\n     *        since the Unix epoch. Fractional values are allowed so that\n     *        timestamps with sub-millisecond accuracy can be represented. If\n     *        not specified, the implementation is expected to use its notion\n     *        of the current time of the call.\n     */\n    Span.prototype.log = function (keyValuePairs, timestamp) {\n        this._log(keyValuePairs, timestamp);\n        return this;\n    };\n    /**\n     * DEPRECATED\n     */\n    Span.prototype.logEvent = function (eventName, payload) {\n        return this._log({ event: eventName, payload: payload });\n    };\n    /**\n     * Sets the end timestamp and finalizes Span state.\n     *\n     * With the exception of calls to Span.context() (which are always allowed),\n     * finish() must be the last call made to any span instance, and to do\n     * otherwise leads to undefined behavior.\n     *\n     * @param  {number} finishTime\n     *         Optional finish time in milliseconds as a Unix timestamp. Decimal\n     *         values are supported for timestamps with sub-millisecond accuracy.\n     *         If not specified, the current time (as defined by the\n     *         implementation) will be used.\n     */\n    Span.prototype.finish = function (finishTime) {\n        this._finish(finishTime);\n        // Do not return `this`. The Span generally should not be used after it\n        // is finished so chaining is not desired in this context.\n    };\n    // ---------------------------------------------------------------------- //\n    // Derived classes can choose to implement the below\n    // ---------------------------------------------------------------------- //\n    // By default returns a no-op SpanContext.\n    Span.prototype._context = function () {\n        return noop.spanContext;\n    };\n    // By default returns a no-op tracer.\n    //\n    // The base class could store the tracer that created it, but it does not\n    // in order to ensure the no-op span implementation has zero members,\n    // which allows V8 to aggressively optimize calls to such objects.\n    Span.prototype._tracer = function () {\n        return noop.tracer;\n    };\n    // By default does nothing\n    Span.prototype._setOperationName = function (name) {\n    };\n    // By default does nothing\n    Span.prototype._setBaggageItem = function (key, value) {\n    };\n    // By default does nothing\n    Span.prototype._getBaggageItem = function (key) {\n        return undefined;\n    };\n    // By default does nothing\n    //\n    // NOTE: both setTag() and addTags() map to this function. keyValuePairs\n    // will always be an associative array.\n    Span.prototype._addTags = function (keyValuePairs) {\n    };\n    // By default does nothing\n    Span.prototype._log = function (keyValuePairs, timestamp) {\n    };\n    // By default does nothing\n    //\n    // finishTime is expected to be either a number or undefined.\n    Span.prototype._finish = function (finishTime) {\n    };\n    return Span;\n}());\nexports.Span = Span;\nexports.default = Span;\n//# sourceMappingURL=span.js.map","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck;","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;","var _typeof = require(\"../helpers/typeof\");\n\nvar assertThisInitialized = require(\"./assertThisInitialized\");\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}\n\nmodule.exports = _possibleConstructorReturn;","function _getPrototypeOf(o) {\n  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nmodule.exports = _getPrototypeOf;","var setPrototypeOf = require(\"./setPrototypeOf\");\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}\n\nmodule.exports = _inherits;","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar span_1 = require(\"./span\");\nvar span_context_1 = require(\"./span_context\");\nvar tracer_1 = require(\"./tracer\");\nexports.tracer = null;\nexports.spanContext = null;\nexports.span = null;\n// Deferred initialization to avoid a dependency cycle where Tracer depends on\n// Span which depends on the noop tracer.\nfunction initialize() {\n    exports.tracer = new tracer_1.default();\n    exports.span = new span_1.default();\n    exports.spanContext = new span_context_1.default();\n}\nexports.initialize = initialize;\n//# sourceMappingURL=noop.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Functions = require(\"./functions\");\nvar Noop = require(\"./noop\");\nvar span_1 = require(\"./span\");\n/**\n * Tracer is the entry-point between the instrumentation API and the tracing\n * implementation.\n *\n * The default object acts as a no-op implementation.\n *\n * Note to implementators: derived classes can choose to directly implement the\n * methods in the \"OpenTracing API methods\" section, or optionally the subset of\n * underscore-prefixed methods to pick up the argument checking and handling\n * automatically from the base class.\n */\nvar Tracer = /** @class */ (function () {\n    function Tracer() {\n    }\n    // ---------------------------------------------------------------------- //\n    // OpenTracing API methods\n    // ---------------------------------------------------------------------- //\n    /**\n     * Starts and returns a new Span representing a logical unit of work.\n     *\n     * For example:\n     *\n     *     // Start a new (parentless) root Span:\n     *     var parent = Tracer.startSpan('DoWork');\n     *\n     *     // Start a new (child) Span:\n     *     var child = Tracer.startSpan('load-from-db', {\n     *         childOf: parent.context(),\n     *     });\n     *\n     *     // Start a new async (FollowsFrom) Span:\n     *     var child = Tracer.startSpan('async-cache-write', {\n     *         references: [\n     *             opentracing.followsFrom(parent.context())\n     *         ],\n     *     });\n     *\n     * @param {string} name - the name of the operation (REQUIRED).\n     * @param {SpanOptions} [options] - options for the newly created span.\n     * @return {Span} - a new Span object.\n     */\n    Tracer.prototype.startSpan = function (name, options) {\n        if (options === void 0) { options = {}; }\n        // Convert options.childOf to fields.references as needed.\n        if (options.childOf) {\n            // Convert from a Span or a SpanContext into a Reference.\n            var childOf = Functions.childOf(options.childOf);\n            if (options.references) {\n                options.references.push(childOf);\n            }\n            else {\n                options.references = [childOf];\n            }\n            delete (options.childOf);\n        }\n        return this._startSpan(name, options);\n    };\n    /**\n     * Injects the given SpanContext instance for cross-process propagation\n     * within `carrier`. The expected type of `carrier` depends on the value of\n     * `format.\n     *\n     * OpenTracing defines a common set of `format` values (see\n     * FORMAT_TEXT_MAP, FORMAT_HTTP_HEADERS, and FORMAT_BINARY), and each has\n     * an expected carrier type.\n     *\n     * Consider this pseudocode example:\n     *\n     *     var clientSpan = ...;\n     *     ...\n     *     // Inject clientSpan into a text carrier.\n     *     var headersCarrier = {};\n     *     Tracer.inject(clientSpan.context(), Tracer.FORMAT_HTTP_HEADERS, headersCarrier);\n     *     // Incorporate the textCarrier into the outbound HTTP request header\n     *     // map.\n     *     Object.assign(outboundHTTPReq.headers, headersCarrier);\n     *     // ... send the httpReq\n     *\n     * @param  {SpanContext} spanContext - the SpanContext to inject into the\n     *         carrier object. As a convenience, a Span instance may be passed\n     *         in instead (in which case its .context() is used for the\n     *         inject()).\n     * @param  {string} format - the format of the carrier.\n     * @param  {any} carrier - see the documentation for the chosen `format`\n     *         for a description of the carrier object.\n     */\n    Tracer.prototype.inject = function (spanContext, format, carrier) {\n        // Allow the user to pass a Span instead of a SpanContext\n        if (spanContext instanceof span_1.default) {\n            spanContext = spanContext.context();\n        }\n        return this._inject(spanContext, format, carrier);\n    };\n    /**\n     * Returns a SpanContext instance extracted from `carrier` in the given\n     * `format`.\n     *\n     * OpenTracing defines a common set of `format` values (see\n     * FORMAT_TEXT_MAP, FORMAT_HTTP_HEADERS, and FORMAT_BINARY), and each has\n     * an expected carrier type.\n     *\n     * Consider this pseudocode example:\n     *\n     *     // Use the inbound HTTP request's headers as a text map carrier.\n     *     var headersCarrier = inboundHTTPReq.headers;\n     *     var wireCtx = Tracer.extract(Tracer.FORMAT_HTTP_HEADERS, headersCarrier);\n     *     var serverSpan = Tracer.startSpan('...', { childOf : wireCtx });\n     *\n     * @param  {string} format - the format of the carrier.\n     * @param  {any} carrier - the type of the carrier object is determined by\n     *         the format.\n     * @return {SpanContext}\n     *         The extracted SpanContext, or null if no such SpanContext could\n     *         be found in `carrier`\n     */\n    Tracer.prototype.extract = function (format, carrier) {\n        return this._extract(format, carrier);\n    };\n    // ---------------------------------------------------------------------- //\n    // Derived classes can choose to implement the below\n    // ---------------------------------------------------------------------- //\n    // NOTE: the input to this method is *always* an associative array. The\n    // public-facing startSpan() method normalizes the arguments so that\n    // all N implementations do not need to worry about variations in the call\n    // signature.\n    //\n    // The default behavior returns a no-op span.\n    Tracer.prototype._startSpan = function (name, fields) {\n        return Noop.span;\n    };\n    // The default behavior is a no-op.\n    Tracer.prototype._inject = function (spanContext, format, carrier) {\n    };\n    // The default behavior is to return a no-op SpanContext.\n    Tracer.prototype._extract = function (format, carrier) {\n        return Noop.spanContext;\n    };\n    return Tracer;\n}());\nexports.Tracer = Tracer;\nexports.default = Tracer;\n//# sourceMappingURL=tracer.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * SpanContext represents Span state that must propagate to descendant Spans\n * and across process boundaries.\n *\n * SpanContext is logically divided into two pieces: the user-level \"Baggage\"\n * (see setBaggageItem and getBaggageItem) that propagates across Span\n * boundaries and any Tracer-implementation-specific fields that are needed to\n * identify or otherwise contextualize the associated Span instance (e.g., a\n * <trace_id, span_id, sampled> tuple).\n */\nvar SpanContext = /** @class */ (function () {\n    function SpanContext() {\n    }\n    // The SpanContext is entirely implementation dependent\n    /**\n     * Returns a string representation of the implementation internal trace ID.\n     *\n     * @returns {string}\n     */\n    SpanContext.prototype.toTraceId = function () {\n        return '';\n    };\n    /**\n     * Returns a string representation of the implementation internal span ID.\n     *\n     * @returns {string}\n     */\n    SpanContext.prototype.toSpanId = function () {\n        return '';\n    };\n    return SpanContext;\n}());\nexports.SpanContext = SpanContext;\nexports.default = SpanContext;\n//# sourceMappingURL=span_context.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Constants = require(\"./constants\");\nvar reference_1 = require(\"./reference\");\nvar span_1 = require(\"./span\");\n/**\n * Return a new REFERENCE_CHILD_OF reference.\n *\n * @param {SpanContext} spanContext - the parent SpanContext instance to\n *        reference.\n * @return a REFERENCE_CHILD_OF reference pointing to `spanContext`\n */\nfunction childOf(spanContext) {\n    // Allow the user to pass a Span instead of a SpanContext\n    if (spanContext instanceof span_1.default) {\n        spanContext = spanContext.context();\n    }\n    return new reference_1.default(Constants.REFERENCE_CHILD_OF, spanContext);\n}\nexports.childOf = childOf;\n/**\n * Return a new REFERENCE_FOLLOWS_FROM reference.\n *\n * @param {SpanContext} spanContext - the parent SpanContext instance to\n *        reference.\n * @return a REFERENCE_FOLLOWS_FROM reference pointing to `spanContext`\n */\nfunction followsFrom(spanContext) {\n    // Allow the user to pass a Span instead of a SpanContext\n    if (spanContext instanceof span_1.default) {\n        spanContext = spanContext.context();\n    }\n    return new reference_1.default(Constants.REFERENCE_FOLLOWS_FROM, spanContext);\n}\nexports.followsFrom = followsFrom;\n//# sourceMappingURL=functions.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * The FORMAT_BINARY format represents SpanContexts in an opaque binary\n * carrier.\n *\n * Tracer.inject() will set the buffer field to an Array-like (Array,\n * ArrayBuffer, or TypedBuffer) object containing the injected binary data.\n * Any valid Object can be used as long as the buffer field of the object\n * can be set.\n *\n * Tracer.extract() will look for `carrier.buffer`, and that field is\n * expected to be an Array-like object (Array, ArrayBuffer, or\n * TypedBuffer).\n */\nexports.FORMAT_BINARY = 'binary';\n/**\n * The FORMAT_TEXT_MAP format represents SpanContexts using a\n * string->string map (backed by a Javascript Object) as a carrier.\n *\n * NOTE: Unlike FORMAT_HTTP_HEADERS, FORMAT_TEXT_MAP places no restrictions\n * on the characters used in either the keys or the values of the map\n * entries.\n *\n * The FORMAT_TEXT_MAP carrier map may contain unrelated data (e.g.,\n * arbitrary gRPC metadata); as such, the Tracer implementation should use\n * a prefix or other convention to distinguish Tracer-specific key:value\n * pairs.\n */\nexports.FORMAT_TEXT_MAP = 'text_map';\n/**\n * The FORMAT_HTTP_HEADERS format represents SpanContexts using a\n * character-restricted string->string map (backed by a Javascript Object)\n * as a carrier.\n *\n * Keys and values in the FORMAT_HTTP_HEADERS carrier must be suitable for\n * use as HTTP headers (without modification or further escaping). That is,\n * the keys have a greatly restricted character set, casing for the keys\n * may not be preserved by various intermediaries, and the values should be\n * URL-escaped.\n *\n * The FORMAT_HTTP_HEADERS carrier map may contain unrelated data (e.g.,\n * arbitrary HTTP headers); as such, the Tracer implementation should use a\n * prefix or other convention to distinguish Tracer-specific key:value\n * pairs.\n */\nexports.FORMAT_HTTP_HEADERS = 'http_headers';\n/**\n * A Span may be the \"child of\" a parent Span. In a “child of” reference,\n * the parent Span depends on the child Span in some capacity.\n *\n * See more about reference types at https://github.com/opentracing/specification\n */\nexports.REFERENCE_CHILD_OF = 'child_of';\n/**\n * Some parent Spans do not depend in any way on the result of their child\n * Spans. In these cases, we say merely that the child Span “follows from”\n * the parent Span in a causal sense.\n *\n * See more about reference types at https://github.com/opentracing/specification\n */\nexports.REFERENCE_FOLLOWS_FROM = 'follows_from';\n//# sourceMappingURL=constants.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar span_1 = require(\"./span\");\n/**\n * Reference pairs a reference type constant (e.g., REFERENCE_CHILD_OF or\n * REFERENCE_FOLLOWS_FROM) with the SpanContext it points to.\n *\n * See the exported childOf() and followsFrom() functions at the package level.\n */\nvar Reference = /** @class */ (function () {\n    /**\n     * Initialize a new Reference instance.\n     *\n     * @param {string} type - the Reference type constant (e.g.,\n     *        REFERENCE_CHILD_OF or REFERENCE_FOLLOWS_FROM).\n     * @param {SpanContext} referencedContext - the SpanContext being referred\n     *        to. As a convenience, a Span instance may be passed in instead\n     *        (in which case its .context() is used here).\n     */\n    function Reference(type, referencedContext) {\n        this._type = type;\n        this._referencedContext = (referencedContext instanceof span_1.default ?\n            referencedContext.context() :\n            referencedContext);\n    }\n    /**\n     * @return {string} The Reference type (e.g., REFERENCE_CHILD_OF or\n     *         REFERENCE_FOLLOWS_FROM).\n     */\n    Reference.prototype.type = function () {\n        return this._type;\n    };\n    /**\n     * @return {SpanContext} The SpanContext being referred to (e.g., the\n     *         parent in a REFERENCE_CHILD_OF Reference).\n     */\n    Reference.prototype.referencedContext = function () {\n        return this._referencedContext;\n    };\n    return Reference;\n}());\nexports.default = Reference;\n//# sourceMappingURL=reference.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar opentracing = require(\"../index\");\n/**\n * OpenTracing Context implementation designed for use in\n * unit tests.\n */\nvar MockContext = /** @class */ (function (_super) {\n    __extends(MockContext, _super);\n    function MockContext(span) {\n        var _this = _super.call(this) || this;\n        // Store a reference to the span itself since this is a mock tracer\n        // intended to make debugging and unit testing easier.\n        _this._span = span;\n        return _this;\n    }\n    MockContext.prototype.span = function () {\n        return this._span;\n    };\n    return MockContext;\n}(opentracing.SpanContext));\nexports.MockContext = MockContext;\nexports.default = MockContext;\n//# sourceMappingURL=mock_context.js.map","\"use strict\";\n/* eslint-disable import/no-extraneous-dependencies */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar opentracing = require(\"../index\");\nvar mock_context_1 = require(\"./mock_context\");\n/**\n * OpenTracing Span implementation designed for use in unit tests.\n */\nvar MockSpan = /** @class */ (function (_super) {\n    __extends(MockSpan, _super);\n    //------------------------------------------------------------------------//\n    // MockSpan-specific\n    //------------------------------------------------------------------------//\n    function MockSpan(tracer) {\n        var _this = _super.call(this) || this;\n        _this._mockTracer = tracer;\n        _this._uuid = _this._generateUUID();\n        _this._startMs = Date.now();\n        _this._finishMs = 0;\n        _this._operationName = '';\n        _this._tags = {};\n        _this._logs = [];\n        return _this;\n    }\n    //------------------------------------------------------------------------//\n    // OpenTracing implementation\n    //------------------------------------------------------------------------//\n    MockSpan.prototype._context = function () {\n        return new mock_context_1.default(this);\n    };\n    MockSpan.prototype._setOperationName = function (name) {\n        this._operationName = name;\n    };\n    MockSpan.prototype._addTags = function (set) {\n        var keys = Object.keys(set);\n        for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n            var key = keys_1[_i];\n            this._tags[key] = set[key];\n        }\n    };\n    MockSpan.prototype._log = function (fields, timestamp) {\n        this._logs.push({\n            fields: fields,\n            timestamp: timestamp\n        });\n    };\n    MockSpan.prototype._finish = function (finishTime) {\n        this._finishMs = finishTime || Date.now();\n    };\n    MockSpan.prototype.uuid = function () {\n        return this._uuid;\n    };\n    MockSpan.prototype.operationName = function () {\n        return this._operationName;\n    };\n    MockSpan.prototype.durationMs = function () {\n        return this._finishMs - this._startMs;\n    };\n    MockSpan.prototype.tags = function () {\n        return this._tags;\n    };\n    MockSpan.prototype.tracer = function () {\n        return this._mockTracer;\n    };\n    MockSpan.prototype._generateUUID = function () {\n        var p0 = (\"00000000\" + Math.abs((Math.random() * 0xFFFFFFFF) | 0).toString(16)).substr(-8);\n        var p1 = (\"00000000\" + Math.abs((Math.random() * 0xFFFFFFFF) | 0).toString(16)).substr(-8);\n        return \"\" + p0 + p1;\n    };\n    MockSpan.prototype.addReference = function (ref) {\n    };\n    /**\n     * Returns a simplified object better for console.log()'ing.\n     */\n    MockSpan.prototype.debug = function () {\n        var obj = {\n            uuid: this._uuid,\n            operation: this._operationName,\n            millis: [this._finishMs - this._startMs, this._startMs, this._finishMs]\n        };\n        if (Object.keys(this._tags).length) {\n            obj.tags = this._tags;\n        }\n        return obj;\n    };\n    return MockSpan;\n}(opentracing.Span));\nexports.MockSpan = MockSpan;\nexports.default = MockSpan;\n//# sourceMappingURL=mock_span.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Convenience class to use as a binary carrier.\n *\n * Any valid Object with a field named `buffer` may be used as a binary carrier;\n * this class is only one such type of object that can be used.\n */\nvar BinaryCarrier = /** @class */ (function () {\n    function BinaryCarrier(buffer) {\n        this.buffer = buffer;\n    }\n    return BinaryCarrier;\n}());\nexports.default = BinaryCarrier;\n//# sourceMappingURL=binary_carrier.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/** SPAN_KIND hints at relationship between spans, e.g. client/server */\nexports.SPAN_KIND = 'span.kind';\n/** Marks a span representing the client-side of an RPC or other remote call */\nexports.SPAN_KIND_RPC_CLIENT = 'client';\n/** Marks a span representing the server-side of an RPC or other remote call */\nexports.SPAN_KIND_RPC_SERVER = 'server';\n/** Marks a span representing the producing-side within a messaging system or other remote call */\nexports.SPAN_KIND_MESSAGING_PRODUCER = 'producer';\n/** Marks a span representing the consuming-side within a messaging system or other remote call */\nexports.SPAN_KIND_MESSAGING_CONSUMER = 'consumer';\n/**\n * ERROR (boolean) true if and only if the application considers the operation\n * represented by the Span to have failed\n */\nexports.ERROR = 'error';\n/**\n * COMPONENT (string) ia s low-cardinality identifier of the module, library,\n * or package that is generating a span.\n */\nexports.COMPONENT = 'component';\n/**\n * SAMPLING_PRIORITY (number) determines the priority of sampling this Span.\n * If greater than 0, a hint to the Tracer to do its best to capture the trace.\n * If 0, a hint to the trace to not-capture the trace. If absent, the Tracer\n * should use its default sampling mechanism.\n */\nexports.SAMPLING_PRIORITY = 'sampling.priority';\n// ---------------------------------------------------------------------------\n// PEER_* tags can be emitted by either client-side of server-side to describe\n// the other side/service in a peer-to-peer communications, like an RPC call.\n// ---------------------------------------------------------------------------\n/**\n * PEER_SERVICE (string) Remote service name (for some unspecified\n * definition of \"service\"). E.g., \"elasticsearch\", \"a_custom_microservice\", \"memcache\"\n */\nexports.PEER_SERVICE = 'peer.service';\n/** PEER_HOSTNAME (string) Remote hostname. E.g., \"opentracing.io\", \"internal.dns.name\" */\nexports.PEER_HOSTNAME = 'peer.hostname';\n/**\n * PEER_ADDRESS (string) Remote \"address\", suitable for use in a\n * networking client library. This may be a \"ip:port\", a bare\n * \"hostname\", a FQDN, or even a JDBC substring like \"mysql://prod-db:3306\"\n */\nexports.PEER_ADDRESS = 'peer.address';\n/**\n * PEER_HOST_IPV4 (number) Remote IPv4 address as a .-separated tuple.\n * E.g., \"127.0.0.1\"\n */\nexports.PEER_HOST_IPV4 = 'peer.ipv4';\n// PEER_HOST_IPV6 (string) Remote IPv6 address as a string of\n// colon-separated 4-char hex tuples. E.g., \"2001:0db8:85a3:0000:0000:8a2e:0370:7334\"\nexports.PEER_HOST_IPV6 = 'peer.ipv6';\n// PEER_PORT (number) Remote port. E.g., 80\nexports.PEER_PORT = 'peer.port';\n// ---------------------------------------------------------------------------\n// HTTP tags\n// ---------------------------------------------------------------------------\n/**\n * HTTP_URL (string) URL of the request being handled in this segment of the\n * trace, in standard URI format. E.g., \"https://domain.net/path/to?resource=here\"\n */\nexports.HTTP_URL = 'http.url';\n/**\n * HTTP_METHOD (string) HTTP method of the request for the associated Span. E.g.,\n * \"GET\", \"POST\"\n */\nexports.HTTP_METHOD = 'http.method';\n/**\n * HTTP_STATUS_CODE (number) HTTP response status code for the associated Span.\n * E.g., 200, 503, 404\n */\nexports.HTTP_STATUS_CODE = 'http.status_code';\n// -------------------------------------------------------------------------\n// Messaging tags\n// -------------------------------------------------------------------------\n/**\n * MESSAGE_BUS_DESTINATION (string) An address at which messages can be exchanged.\n * E.g. A Kafka record has an associated \"topic name\" that can be extracted\n * by the instrumented producer or consumer and stored using this tag.\n */\nexports.MESSAGE_BUS_DESTINATION = 'message_bus.destination';\n// --------------------------------------------------------------------------\n// Database tags\n// --------------------------------------------------------------------------\n/**\n * DB_INSTANCE (string) Database instance name. E.g., In java, if the\n * jdbc.url=\"jdbc:mysql://127.0.0.1:3306/customers\", the instance name is \"customers\".\n */\nexports.DB_INSTANCE = 'db.instance';\n/**\n * DB_STATEMENT (string) A database statement for the given database type.\n * E.g., for db.type=\"SQL\", \"SELECT * FROM wuser_table\";\n * for db.type=\"redis\", \"SET mykey 'WuValue'\".\n */\nexports.DB_STATEMENT = 'db.statement';\n/**\n * DB_TYPE (string) Database type. For any SQL database, \"sql\". For others,\n * the lower-case database category, e.g. \"cassandra\", \"hbase\", or \"redis\".\n */\nexports.DB_TYPE = 'db.type';\n/**\n * DB_USER (string) Username for accessing database. E.g., \"readonly_user\"\n * or \"reporting_user\"\n */\nexports.DB_USER = 'db.user';\n//# sourceMappingURL=tags.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar mock_context_1 = require(\"./mock_context\");\nexports.MockContext = mock_context_1.default;\nvar mock_span_1 = require(\"./mock_span\");\nexports.MockSpan = mock_span_1.default;\nvar mock_tracer_1 = require(\"./mock_tracer\");\nexports.MockTracer = mock_tracer_1.default;\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// TODO: Move mock-tracer to its own NPM package once it is complete and tested.\nvar opentracing = require(\"../index\");\nvar mock_report_1 = require(\"./mock_report\");\nvar mock_span_1 = require(\"./mock_span\");\n/**\n * OpenTracing Tracer implementation designed for use in unit tests.\n */\nvar MockTracer = /** @class */ (function (_super) {\n    __extends(MockTracer, _super);\n    //------------------------------------------------------------------------//\n    // MockTracer-specific\n    //------------------------------------------------------------------------//\n    function MockTracer() {\n        var _this = _super.call(this) || this;\n        _this._spans = [];\n        return _this;\n    }\n    //------------------------------------------------------------------------//\n    // OpenTracing implementation\n    //------------------------------------------------------------------------//\n    MockTracer.prototype._startSpan = function (name, fields) {\n        // _allocSpan is given it's own method so that derived classes can\n        // allocate any type of object they want, but not have to duplicate\n        // the other common logic in startSpan().\n        var span = this._allocSpan();\n        span.setOperationName(name);\n        this._spans.push(span);\n        if (fields.references) {\n            for (var _i = 0, _a = fields.references; _i < _a.length; _i++) {\n                var ref = _a[_i];\n                span.addReference(ref);\n            }\n        }\n        // Capture the stack at the time the span started\n        span._startStack = new Error().stack;\n        return span;\n    };\n    MockTracer.prototype._inject = function (span, format, carrier) {\n        throw new Error('NOT YET IMPLEMENTED');\n    };\n    MockTracer.prototype._extract = function (format, carrier) {\n        throw new Error('NOT YET IMPLEMENTED');\n    };\n    MockTracer.prototype._allocSpan = function () {\n        return new mock_span_1.default(this);\n    };\n    /**\n     * Discard any buffered data.\n     */\n    MockTracer.prototype.clear = function () {\n        this._spans = [];\n    };\n    /**\n     * Return the buffered data in a format convenient for making unit test\n     * assertions.\n     */\n    MockTracer.prototype.report = function () {\n        return new mock_report_1.default(this._spans);\n    };\n    return MockTracer;\n}(opentracing.Tracer));\nexports.MockTracer = MockTracer;\nexports.default = MockTracer;\n//# sourceMappingURL=mock_tracer.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Index a collection of reported MockSpans in a way that's easy to run unit\n * test assertions against.\n */\nvar MockReport = /** @class */ (function () {\n    function MockReport(spans) {\n        var _this = this;\n        this.spans = spans;\n        this.spansByUUID = {};\n        this.spansByTag = {};\n        this.debugSpans = [];\n        this.unfinishedSpans = [];\n        spans.forEach(function (span) {\n            if (span._finishMs === 0) {\n                _this.unfinishedSpans.push(span);\n            }\n            _this.spansByUUID[span.uuid()] = span;\n            _this.debugSpans.push(span.debug());\n            var tags = span.tags();\n            Object.keys(tags).forEach(function (key) {\n                var val = tags[key];\n                _this.spansByTag[key] = _this.spansByTag[key] || {};\n                _this.spansByTag[key][val] = _this.spansByTag[key][val] || [];\n                _this.spansByTag[key][val].push(span);\n            });\n        });\n    }\n    MockReport.prototype.firstSpanWithTagValue = function (key, val) {\n        var m = this.spansByTag[key];\n        if (!m) {\n            return null;\n        }\n        var n = m[val];\n        if (!n) {\n            return null;\n        }\n        return n[0];\n    };\n    return MockReport;\n}());\nexports.MockReport = MockReport;\nexports.default = MockReport;\n//# sourceMappingURL=mock_report.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tracer_1 = require(\"./tracer\");\nvar noopTracer = new tracer_1.default();\nvar _globalTracer = null;\n// Allows direct importing/requiring of the global tracer:\n//\n// let globalTracer = require('opentracing/global');\n//      OR\n// import globalTracer from 'opentracing/global';\n//\n// Acts a bridge to the global tracer that can be safely called before the\n// global tracer is initialized. The purpose of the delegation is to avoid the\n// sometimes nearly intractible initialization order problems that can arise in\n// applications with a complex set of dependencies, while also avoiding the\n// case where\nvar GlobalTracerDelegate = /** @class */ (function (_super) {\n    __extends(GlobalTracerDelegate, _super);\n    function GlobalTracerDelegate() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    GlobalTracerDelegate.prototype.startSpan = function () {\n        var tracer = _globalTracer || noopTracer;\n        return tracer.startSpan.apply(tracer, arguments);\n    };\n    GlobalTracerDelegate.prototype.inject = function () {\n        var tracer = _globalTracer || noopTracer;\n        return tracer.inject.apply(tracer, arguments);\n    };\n    GlobalTracerDelegate.prototype.extract = function () {\n        var tracer = _globalTracer || noopTracer;\n        return tracer.extract.apply(tracer, arguments);\n    };\n    return GlobalTracerDelegate;\n}(tracer_1.default));\nvar globalTracerDelegate = new GlobalTracerDelegate();\n/**\n * Set the global Tracer.\n *\n * The behavior is undefined if this function is called more than once.\n *\n * @param {Tracer} tracer - the Tracer implementation\n */\nfunction initGlobalTracer(tracer) {\n    _globalTracer = tracer;\n}\nexports.initGlobalTracer = initGlobalTracer;\n/**\n * Returns the global tracer.\n */\nfunction globalTracer() {\n    // Return the delegate.  Since the global tracer is largely a convenience\n    // (the user can always create their own tracers), the delegate is used to\n    // give the added convenience of not needing to worry about initialization\n    // order.\n    return globalTracerDelegate;\n}\nexports.globalTracer = globalTracer;\n//# sourceMappingURL=global_tracer.js.map","function _typeof2(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof2(obj); }\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\") {\n    module.exports = _typeof = function _typeof(obj) {\n      return _typeof2(obj);\n    };\n  } else {\n    module.exports = _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof2(obj);\n    };\n  }\n\n  return _typeof(obj);\n}\n\nmodule.exports = _typeof;","function _setPrototypeOf(o, p) {\n  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nmodule.exports = _setPrototypeOf;","import {\n  Tracer,\n  Span,\n  SpanContext,\n  Reference,\n  REFERENCE_FOLLOWS_FROM,\n  REFERENCE_CHILD_OF\n} from \"opentracing\";\n\nexport function createCodePathTracer(traceId, stream, options) {\n  return new CodePathTracer(traceId, stream, options);\n}\n\nclass CodePathTracer extends Tracer {\n  _traceId;\n  _clock;\n  _scopeManager;\n  _stream;\n  _nextSpanId;\n\n  constructor(traceId, stream, options) {\n    super();\n    this._traceId = traceId;\n    this._nextSpanId = 1;\n    this._clock = options.clock;\n    this._scopeManager = options.scopeManager;\n    this._stream = stream;\n\n    stream.writeStartTracer(options.clock.now(), traceId);\n  }\n\n  // NOTE: the input to this method is *always* an associative array. The\n  // public-facing startSpan() method normalizes the arguments so that\n  // all N implementations do not need to worry about variations in the call\n  // signature.\n  //\n  // The default behavior returns a no-op span.\n  // protected _startSpan(name: string, fields: SpanOptions): Span {\n  //   return Noop.span!;\n  // }\n  _startSpan(name, options) {\n    return new CodePathSpan(\n      this,\n      this._clock,\n      this._stream,\n      this._nextSpanId++,\n      name,\n      options\n    );\n  }\n\n  // The default behavior is a no-op.\n  // protected _inject(spanContext: SpanContext, format: string, carrier: any): void {\n  // }\n  _inject(spanContext, format, carrier) {}\n\n  // The default behavior is to return a no-op SpanContext.\n  // protected _extract(format: string, carrier: any): SpanContext | null {\n  //   return Noop.spanContext!;\n  // }\n  _extract(format, carrier) {\n    return new CodePathSpanContext(\"\", \"\");\n  }\n\n  getTraceId() {\n    return this._traceId;\n  }\n\n  getCurrentTime() {\n    return this._clock.now();\n  }\n}\n\nclass CodePathSpan extends Span {\n  _tracer;\n  _clock;\n  _stream;\n  _selfContext;\n  // _childOfContext;\n  // _followsFromContext;\n  // _operationName;\n  // _startTime;\n  // _endTime;\n  // _baggageItems;\n  // _tags;\n  // _logs;\n\n  constructor(tracer, clock, stream, spanId, name, options) {\n    super();\n\n    const traceId = tracer.getTraceId();\n\n    this._tracer = tracer;\n    this._clock = clock;\n    this._stream = stream;\n    this._selfContext = new CodePathSpanContext(traceId, spanId);\n\n    const startTime = (options && options.startTime) || clock.now();\n    const { childOf, followsFrom } = findReferences(options);\n\n    stream.writeStartSpan(\n      startTime,\n      traceId,\n      spanId,\n      name,\n      {\n        childOf: contextToPlain(childOf),\n        followsFrom: contextToPlain(followsFrom)\n      },\n      options.tags\n    );\n\n    // this._operationName = name;\n    // this._startTime = (options && options.startTime) || tracer.getCurrentTime();\n    // this._endTime = undefined;\n    // this._baggageItems = {};\n    // this._tags = (options && options.tags) || {};\n    // this._logs = [];\n  }\n\n  // getData() {\n  //   return {\n  //     context: contextToPlain(this._selfContext),\n  //     childOf: contextToPlain(this._childOfContext),\n  //     followsFrom: contextToPlain(this._followsFromContext),\n  //     operationName: this._operationName,\n  //     startTime: this._startTime,\n  //     endTime: this._endTime,\n  //     baggageItems: this._baggageItems,\n  //     tags: this._tags,\n  //     logs: this._logs\n  //   };\n  // }\n\n  // By default returns a no-op SpanContext.\n  // protected _context(): SpanContext {\n  //     return noop.spanContext!;\n  // }\n  _context() {\n    return this._selfContext;\n  }\n\n  // By default returns a no-op tracer.\n  //\n  // The base class could store the tracer that created it, but it does not\n  // in order to ensure the no-op span implementation has zero members,\n  // which allows V8 to aggressively optimize calls to such objects.\n  // protected _tracer(): Tracer {\n  //     return noop.tracer!;\n  // }\n  _tracer() {\n    return this._tracer;\n  }\n\n  // By default does nothing\n  // protected _setOperationName(name: string): void {\n  // }\n  _setOperationName(name) {\n    throw new Error(\"Not supported: setOperationName\");\n    //this._operationName = name;\n  }\n\n  // By default does nothing\n  // protected _setBaggageItem(key: string, value: string): void {\n  // }\n  _setBaggageItem(key, value) {\n    throw new Error(\"Not supported: setBaggageItem\");\n    //this._baggageItems[key] = value;\n  }\n\n  // By default does nothing\n  // protected _getBaggageItem(key: string): string | undefined {\n  //     return undefined;\n  // }\n  _getBaggageItem(key) {\n    return undefined;\n    //return this._baggageItems[key];\n  }\n\n  // By default does nothing\n  //\n  // NOTE: both setTag() and addTags() map to this function. keyValuePairs\n  // will always be an associative array.\n  // protected _addTags(keyValuePairs: { [key: string]: any }): void {\n  // }\n  _addTags(keyValuePairs) {\n    const { traceId, spanId } = contextToPlain(this._selfContext);\n    this._stream.writeSpanTags(\n      this._clock.now(),\n      traceId,\n      spanId,\n      keyValuePairs\n    );\n    // this._tags = {\n    //   ...this._tags,\n    //   ...keyValuePairs\n    // };\n  }\n\n  // By default does nothing\n  // protected _log(keyValuePairs: { [key: string]: any }, timestamp?: number): void {\n  // }\n  _log(keyValuePairs, timestamp) {\n    const time = timestamp || this._clock.now();\n    const { traceId, spanId } = contextToPlain(this._selfContext);\n    this._stream.writeLog(\n      time,\n      traceId,\n      spanId,\n      keyValuePairs.$id,\n      keyValuePairs\n    );\n    // const logEntry = {\n    //   ...(keyValuePairs || {}),\n    //   $time: timestamp || this._tracer.getCurrentTime()\n    // };\n    // this._logs.push(logEntry);\n  }\n\n  // By default does nothing\n  //\n  // finishTime is expected to be either a number or undefined.\n  // protected _finish(finishTime?: number): void {\n  // }\n  _finish(finishTime) {\n    const effectiveFinishTime = finishTime || this._clock.now();\n    const { traceId, spanId } = contextToPlain(this._selfContext);\n    this._stream.writeEndSpan(effectiveFinishTime, traceId, spanId);\n\n    // if (this._endTime) {\n    //   throw new Error(\"Invalid operation: span already finished\");\n    // }\n    // this._endTime = finishTime || this._tracer.getCurrentTime();\n  }\n}\n\nclass CodePathSpanContext extends SpanContext {\n  _traceId;\n  _spanId;\n\n  constructor(traceId, spanId) {\n    super();\n    this._traceId = traceId;\n    this._spanId = spanId;\n  }\n\n  /**\n   * Returns a string representation of the implementation internal trace ID.\n   *\n   * @returns {string}\n   */\n  toTraceId() {\n    return this._traceId;\n  }\n\n  /**\n   * Returns a string representation of the implementation internal span ID.\n   *\n   * @returns {string}\n   */\n  toSpanId() {\n    return this._spanId;\n  }\n}\n\nfunction findReferences(options) {\n  let childOf = undefined;\n  let followsFrom = undefined;\n\n  options &&\n    options.references &&\n    options.references.forEach(ref => {\n      switch (ref.type()) {\n        case REFERENCE_CHILD_OF:\n          childOf = ref.referencedContext();\n          break;\n        case REFERENCE_FOLLOWS_FROM:\n          followsFrom = ref.referencedContext();\n          break;\n      }\n    });\n\n  return {\n    childOf,\n    followsFrom\n  };\n}\n\nexport function contextToPlain(context) {\n  if (context) {\n    return {\n      traceId: context.toTraceId(),\n      spanId: context.toSpanId()\n    };\n  }\n}\n\nexport function plainToContext({ traceId, spanId }) {\n  return new CodePathSpanContext(traceId, spanId);\n}\n","import { REFERENCE_FOLLOWS_FROM, REFERENCE_CHILD_OF } from \"opentracing\";\n\nexport function createCodePathStream(options) {\n  let entries = [];\n  let isEnabled = options ? !!options.enabled : true;\n\n  return {\n    writeStartTracer(time, traceId, tags) {\n      if (!isEnabled) {\n        return;\n      }\n      entries.push({\n        time,\n        token: \"StartTracer\",\n        traceId,\n        tags: tags || {}\n      });\n    },\n    writeStartSpan(time, traceId, spanId, messageId, references, tags) {\n      if (!isEnabled) {\n        return;\n      }\n      const { childOf, followsFrom } = references;\n      entries.push({\n        time,\n        token: \"StartSpan\",\n        traceId,\n        spanId,\n        childOf,\n        followsFrom,\n        messageId,\n        tags: tags || {}\n      });\n    },\n    writeEndSpan(time, traceId, spanId, tags) {\n      if (!isEnabled) {\n        return;\n      }\n      entries.push({\n        time,\n        token: \"EndSpan\",\n        traceId,\n        spanId,\n        tags: tags || {}\n      });\n    },\n    writeLog(time, traceId, spanId, messageId, tags) {\n      if (!isEnabled) {\n        return;\n      }\n      entries.push({\n        time,\n        token: \"Log\",\n        traceId,\n        spanId,\n        messageId,\n        tags: tags || {}\n      });\n    },\n    writeSpanTags(time, traceId, spanId, tags) {\n      if (!isEnabled) {\n        return;\n      }\n      entries.push({\n        time,\n        token: \"SpanTags\",\n        traceId,\n        spanId,\n        tags: tags || {}\n      });\n    },\n    enable(value) {\n      const effectiveValue = typeof value === \"undefined\" ? true : !!value;\n      isEnabled = effectiveValue;\n    },\n    peekEntries() {\n      return entries;\n    },\n    takeEntries() {\n      const copyOfEntries = entries;\n      entries = [];\n      return copyOfEntries;\n    }\n  };\n}\n","let currentScopeManager = createInternalScopeManager();\n\nexport function trace(promiseOrFunc) {\n  const callerScopeManager = currentScopeManager.clone();\n\n  const originalPromise =\n    typeof promiseOrFunc === \"function\" ? promiseOrFunc() : promiseOrFunc;\n\n  const saveScopeManager = currentScopeManager;\n  const wrapperPromise = new Promise((resolve, reject) => {\n    originalPromise\n      .then(value => {\n        currentScopeManager = saveScopeManager;\n        resolve(value);\n      })\n      .catch(err => {\n        currentScopeManager = saveScopeManager;\n        reject(err);\n      });\n  });\n\n  currentScopeManager = callerScopeManager;\n  return wrapperPromise;\n}\n\nexport function createDefaultScopeManager() {\n  return {\n    getActiveTracer() {\n      return currentScopeManager.getActiveTracer();\n    },\n    getActiveSpan() {\n      return currentScopeManager.getActiveSpan();\n    },\n    setActiveTracer(tracer) {\n      currentScopeManager.setActiveTracer(tracer);\n    },\n    setActiveSpan(span) {\n      currentScopeManager.setActiveSpan(span);\n    }\n  };\n}\n\nexport function resetCurrentScope() {\n  currentScopeManager = createInternalScopeManager();\n}\n\nfunction createInternalScopeManager(source) {\n  let activeTracer = source ? source.getActiveTracer() : undefined;\n  let activeSpan = source ? source.getActiveSpan() : undefined;\n  const thisScopeManager = {\n    getActiveTracer() {\n      return activeTracer;\n    },\n    getActiveSpan() {\n      return activeSpan;\n    },\n    setActiveTracer(tracer) {\n      activeTracer = tracer;\n    },\n    setActiveSpan(span) {\n      activeSpan = span;\n    },\n    clone() {\n      return createInternalScopeManager(thisScopeManager);\n    }\n  };\n  return thisScopeManager;\n}\n","import {\n  Tracer,\n  Reference,\n  REFERENCE_FOLLOWS_FROM,\n  REFERENCE_CHILD_OF\n} from \"opentracing\";\n\nimport { createCodePathTracer } from \"./codePathTracer\";\nimport { createCodePathStream } from \"./codePathStream\";\nimport { createDefaultScopeManager } from \"./codePathScopeManager\";\n\nexport const LOG_LEVEL = {\n  debug: 0,\n  event: 1,\n  warning: 2,\n  error: 3,\n  critical: 4\n};\n\nexport const createRealLowResolutionClock = () => {\n  return {\n    now() {\n      return new Date().getTime();\n    }\n  };\n};\n\n// export const createDefaultScopeManager = () => {\n//   let activeTracer = undefined;\n//   let activeSpan = undefined;\n//   return {\n//     getActiveTracer() {\n//       return activeTracer;\n//     },\n//     getActiveSpan() {\n//       return activeSpan;\n//     },\n//     setActiveTracer(tracer) {\n//       activeTracer = tracer;\n//     },\n//     setActiveSpan(span) {\n//       activeSpan = span;\n//     }\n//   };\n// };\n\nexport const noopTracerFactory = () => new Tracer();\n\nexport const defaultTracerFactory = (stream, options) =>\n  createCodePathTracer(`webuser${options.clock.now()}`, stream, options);\n\nexport const GlobalCodePath = {\n  configure(options) {\n    const { input, output } = createCodePath(options);\n    Object.assign(GlobalCodePath, {\n      ...input,\n      getOutputStream() {\n        return output;\n      }\n    });\n  },\n  getOutputStream() {\n    throw new Error(\"GlobalCodePath was not configured\");\n  }\n};\n\nexport function createCodePath(options) {\n  const clock = (options && options.clock) || createRealLowResolutionClock();\n  const scopeManager =\n    (options && options.scopeManager) || createDefaultScopeManager();\n  const tracerFactory =\n    (options && options.tracerFactory) || defaultTracerFactory;\n  const outputStream =\n    (options && options.outputStream) ||\n    createCodePathStream(options ? options.stream : undefined);\n  const spanEntries = {};\n\n  const getOrCreateActiveTracer = () => {\n    const existingTracer = scopeManager.getActiveTracer();\n    if (existingTracer) {\n      return existingTracer;\n    }\n\n    const newTracer = tracerFactory({ clock, scopeManager, tracerFactory });\n    scopeManager.setActiveTracer(newTracer);\n    return newTracer;\n  };\n\n  const getParentSpanContext = parentContext => {\n    if (parentContext) {\n      return parentContext;\n    }\n    const existingSpan = scopeManager.getActiveSpan();\n    if (existingSpan) {\n      return existingSpan.context();\n    }\n  };\n\n  const logToActiveSpan = tags => {\n    const existingSpan = scopeManager.getActiveSpan();\n    if (existingSpan) {\n      existingSpan.log(tags);\n    } else {\n      const tempSpan = activeTracer.startSpan(\"unknown-root\");\n      tempSpan.log(tags);\n      tempSpan.finish();\n    }\n  };\n\n  const startSpan = (id, tags, parentContext, parentReferenceType) => {\n    const tracer = getOrCreateActiveTracer();\n    const parentReferenceContext = getParentSpanContext(parentContext);\n    const spanOptions = {\n      references: parentReferenceContext && [\n        new Reference(parentReferenceType, parentReferenceContext)\n      ],\n      tags\n    };\n    const childSpan = tracer.startSpan(id, spanOptions);\n    scopeManager.setActiveSpan(childSpan);\n    const childSpanId = childSpan.context().toSpanId();\n    spanEntries[childSpanId] = {\n      span: childSpan,\n      options: spanOptions\n    };\n    return childSpan;\n  };\n\n  scopeManager.setActiveTracer(\n    tracerFactory(outputStream, {\n      clock,\n      scopeManager,\n      tracerFactory\n    })\n  );\n\n  const thisCodePath = {\n    logDebug(id, tags) {\n      logToActiveSpan({ $id: id, level: LOG_LEVEL.debug, ...tags });\n    },\n    logEvent(id, tags) {\n      logToActiveSpan({ $id: id, level: LOG_LEVEL.event, ...tags });\n    },\n    logWarning(id, tags) {\n      logToActiveSpan({ $id: id, level: LOG_LEVEL.warning, ...tags });\n    },\n    logError(id, tags) {\n      logToActiveSpan({ $id: id, level: LOG_LEVEL.error, ...tags });\n    },\n    logCritical(id, tags) {\n      logToActiveSpan({ $id: id, level: LOG_LEVEL.critical, ...tags });\n    },\n    spanRoot(id, tags) {\n      scopeManager.setActiveSpan(undefined);\n      return startSpan(id, tags);\n    },\n    spanChild(id, tags, parentContext) {\n      return startSpan(id, tags, parentContext, REFERENCE_CHILD_OF);\n    },\n    spanFollower(id, tags, parentContext) {\n      return startSpan(id, tags, parentContext, REFERENCE_FOLLOWS_FROM);\n    },\n    finishSpan(tags) {\n      const activeSpan = scopeManager.getActiveSpan();\n      if (!activeSpan) {\n        throw new Error(\"Current scope has no active span\");\n      }\n      activeSpan.finish();\n      if (!activeSpan.doesNotifyTracerOnFinish) {\n        thisCodePath.notifySpanFinished(activeSpan);\n      }\n    },\n    notifySpanFinished(span) {\n      const spanContext = span.context();\n      const spanId = spanContext.toSpanId();\n      const traceId = spanContext.toTraceId();\n      const entry = spanEntries[spanId];\n      if (!entry) {\n        throw new Error(`Trace span not found: id [${spanId}]`);\n      }\n      const parentContext =\n        entry.options.references &&\n        entry.options.references[0].referencedContext();\n      if (parentContext && parentContext.toTraceId() === traceId) {\n        const parentEntry = spanEntries[parentContext.toSpanId()];\n        if (parentEntry) {\n          scopeManager.setActiveSpan(parentEntry.span);\n        }\n      } else {\n        scopeManager.setActiveSpan(undefined);\n      }\n      delete spanEntries[spanId];\n    }\n  };\n\n  return {\n    input: thisCodePath,\n    output: outputStream\n  };\n}\n","export function createCodePathModel() {\n  const traceNodeMap = createTraceNodeMap();\n  const rootNode = createRootNode();\n  let nextNodeId = 1;\n  let subscriber = undefined;\n\n  const getParentContext = entry => {\n    if (entry.token === \"StartSpan\") {\n      return entry.childOf || entry.followsFrom;\n    } else {\n      return entry;\n    }\n  };\n\n  const findParentNode = entry => {\n    const parentContext = getParentContext(entry);\n    if (parentContext) {\n      const parentNode = traceNodeMap.getSpanNode(\n        parentContext.traceId,\n        parentContext.spanId\n      );\n      if (parentNode) {\n        return parentNode;\n      }\n      console.warn(\"CODEPATH.MODEL>\", \"Span node not found\", parentContext);\n    }\n    return rootNode;\n  };\n\n  const insertNode = entry => {\n    const { traceId, spanId } = entry;\n    const parent = findParentNode(entry);\n    const newNode = createRegularNode(nextNodeId++, parent, entry);\n\n    appendChildNodeToParent(newNode, parent);\n    if (entry.token === \"StartSpan\") {\n      traceNodeMap.setSpanNode(traceId, spanId, newNode);\n    }\n\n    return newNode;\n  };\n\n  return {\n    getRootNode() {\n      return rootNode;\n    },\n    getNodesFlat() {\n      return getNodesAsFlatArray(rootNode);\n    },\n    publish(entries) {\n      const insertedNodes = entries\n        .filter(\n          entry => entry.token !== \"EndSpan\" && entry.token !== \"StartTracer\"\n        )\n        .map(insertNode);\n\n      subscriber && subscriber(insertedNodes);\n    },\n    subscribe(callback) {\n      subscriber = callback;\n    },\n    unsubscribe(callback) {\n      if (subscriber === callback) {\n        subscriber = undefined;\n      }\n    },\n    // expandRow(id) {\n\n    // },\n    // collapseRow(id) {\n\n    // },\n    // filterRows(query) {\n\n    // },\n    // deleteRow(id) {\n\n    // },\n    clearAllRows() {}\n  };\n}\n\nexport function createRootNode() {\n  return {\n    id: 0,\n    entry: undefined,\n    parent: undefined,\n    depth: -1,\n    firstChild: undefined,\n    lastChild: undefined,\n    prevSibling: undefined,\n    nextSibling: undefined\n  };\n}\n\nexport function createRegularNode(id, parent, entry) {\n  return {\n    id,\n    entry,\n    parent,\n    depth: parent.depth + 1,\n    firstChild: undefined,\n    lastChild: undefined,\n    prevSibling: undefined,\n    nextSibling: undefined\n  };\n}\n\nexport function appendChildNodeToParent(newChild, parent) {\n  if (parent.lastChild) {\n    newChild.prevSibling = parent.lastChild;\n    parent.lastChild.nextSibling = newChild;\n  } else {\n    parent.firstChild = newChild;\n  }\n  parent.lastChild = newChild;\n}\n\nexport function getNodesAsFlatArray(rootNode) {\n  if (!rootNode) {\n    return [];\n  }\n  const flatNodes = [];\n  const pushSubTreeNodes = node => {\n    for (\n      let subNode = node.firstChild;\n      !!subNode;\n      subNode = subNode.nextSibling\n    ) {\n      flatNodes.push(subNode);\n      pushSubTreeNodes(subNode);\n    }\n  };\n  pushSubTreeNodes(rootNode);\n  return flatNodes;\n}\n\nfunction createTraceNodeMap() {\n  let mapByTraceId = {};\n\n  const getOrAddTraceSpanNodeMap = traceId => {\n    const existingMap = mapByTraceId[traceId];\n    if (existingMap) {\n      return existingMap;\n    }\n\n    const newMap = createSpanNodeMap();\n    mapByTraceId[traceId] = newMap;\n    return newMap;\n  };\n\n  return {\n    getSpanNode(traceId, spanId) {\n      const spanNodeMap = getOrAddTraceSpanNodeMap(traceId);\n      return spanNodeMap.getSpanNode(spanId);\n    },\n    setSpanNode(traceId, spanId, node) {\n      const spanNodeMap = getOrAddTraceSpanNodeMap(traceId);\n      return spanNodeMap.setSpanNode(spanId, node);\n    }\n  };\n}\n\nfunction createSpanNodeMap() {\n  let nodeBySpanId = {};\n\n  return {\n    getSpanNode(spanId) {\n      return nodeBySpanId[spanId];\n    },\n    setSpanNode(spanId, node) {\n      nodeBySpanId[spanId] = node;\n    }\n  };\n}\n","import {\n  createRootNode,\n  createRegularNode,\n  appendChildNodeToParent,\n  getNodesAsFlatArray\n} from \"./codePathModel\";\n\nexport function createCodePathSearchModel(sourceModel, predicate) {\n  let subscriber = undefined;\n  let resultNodeById = {};\n  let newlyCreatedResultNodes = undefined;\n\n  const resultRootNode = performSearch();\n  sourceModel.subscribe(sourceModelSubscriber);\n\n  return {\n    getRootNode() {\n      return resultRootNode;\n    },\n    getNodesFlat() {\n      return getNodesAsFlatArray(resultRootNode);\n    },\n    subscribe(callback) {\n      subscriber = callback;\n    },\n    unsubscribe(callback) {\n      if (subscriber === callback) {\n        subscriber = undefined;\n      }\n    }\n  };\n\n  function performSearch() {\n    const sourceRootNode = sourceModel.getRootNode();\n    const resultRootNode = createRootNode();\n    resultNodeById[resultRootNode.id] = resultRootNode;\n\n    depthFirstSearchSubTree(sourceRootNode, () => resultRootNode);\n\n    return resultRootNode;\n  }\n\n  function depthFirstSearchSubTree(node, getResultParentNode) {\n    const createThisResultNode = matched => {\n      return createResultNode(node, matched, getResultParentNode);\n    };\n\n    const isRootNode = !node.parent;\n    const thisNodeMatched = !isRootNode && predicate(node);\n    let thisResultNode = thisNodeMatched\n      ? createThisResultNode(true)\n      : undefined;\n\n    for (\n      let subNode = node.firstChild;\n      !!subNode;\n      subNode = subNode.nextSibling\n    ) {\n      depthFirstSearchSubTree(subNode, () => {\n        if (!thisResultNode) {\n          thisResultNode = isRootNode\n            ? getResultParentNode()\n            : createThisResultNode(false);\n        }\n        return thisResultNode;\n      });\n    }\n  }\n\n  function createResultNode(sourceNode, matched, getResultParentNode) {\n    const resultParentNode = getResultParentNode();\n    let resultNode = createRegularNode(\n      sourceNode.id,\n      resultParentNode,\n      sourceNode.entry\n    );\n    resultNodeById[resultNode.id] = resultNode;\n    if (newlyCreatedResultNodes) {\n      newlyCreatedResultNodes.push(resultNode);\n    }\n    appendChildNodeToParent(resultNode, resultParentNode);\n    resultNode.matched = matched;\n    return resultNode;\n  }\n\n  function getOrCreateResultParentNode(sourceChildNode) {\n    if (!sourceChildNode.parent) {\n      return;\n    }\n    const existingParent = resultNodeById[sourceChildNode.parent.id];\n    if (existingParent) {\n      return existingParent;\n    }\n    return createResultNode(sourceChildNode.parent, false, () =>\n      getOrCreateResultParentNode(sourceChildNode.parent)\n    );\n  }\n\n  function sourceModelSubscriber(insertedNodes) {\n    newlyCreatedResultNodes = [];\n    const matchingNodes = insertedNodes.filter(predicate);\n\n    matchingNodes.forEach(sourceNode => {\n      const getParentNode = () => {\n        return getOrCreateResultParentNode(sourceNode);\n      };\n      createResultNode(sourceNode, true, getParentNode);\n    });\n\n    if (newlyCreatedResultNodes.length > 0) {\n      subscriber && subscriber(newlyCreatedResultNodes);\n    }\n    newlyCreatedResultNodes = undefined;\n  }\n}\n","export function createTreeGridController(view, model) {\n  let rowById = {};\n  let masterIndexVersion = 1;\n\n  const controller = {\n    toggle(id) {\n      return rowById[id].toggle();\n    },\n    expand(id) {\n      rowById[id].expand();\n    },\n    collapse(id) {\n      rowById[id].collapse();\n    },\n    getIsExpanded(id) {\n      return rowById[id].getIsExpanded();\n    },\n    getIsVisible(id) {\n      return rowById[id].getIsVisible();\n    },\n    replaceModel(newModel) {\n      model.unsubscribe(subscriber);\n      model = newModel;\n      initWithCurrentModel();\n    },\n    clearAll() {\n      rowById = {};\n      masterIndexVersion = 1;\n      initRootNode();\n      view.clearAll();\n    },\n    onNodeSelected(callback) {\n      view.onNodeSelected(callback);\n    }\n  };\n\n  view.attachController(controller);\n  initWithCurrentModel();\n\n  return controller;\n\n  function initWithCurrentModel() {\n    controller.clearAll();\n    subscriber(model.getNodesFlat());\n    model.subscribe(subscriber);\n  }\n\n  function createSubNodesRowControllers(subNodes) {\n    for (let node of subNodes) {\n      const row = createRowController(node);\n      rowById[node.id] = row;\n    }\n  }\n\n  function createRowController(node) {\n    let isExpanded = false;\n    let subTreeHeight = 0;\n    let cachedAbsoluteIndex = undefined;\n    let cachedIndexVersion = masterIndexVersion;\n\n    const getNode = () => {\n      return node;\n    };\n    const getParent = () => {\n      return rowById[node.parent.id];\n    };\n    const getPrevSibling = () => {\n      return node.prevSibling ? rowById[node.prevSibling.id] : undefined;\n    };\n    const getNextSibling = () => {\n      return node.nextSibling ? rowById[node.nextSibling.id] : undefined;\n    };\n    const getFirstChild = () => {\n      return node.firstChild ? rowById[node.firstChild.id] : undefined;\n    };\n    const getIsExpanded = () => {\n      return isExpanded;\n    };\n    const getIsVisible = () => {\n      const parent = getParent();\n      return parent.getIsVisible() && parent.getIsExpanded();\n    };\n    const getSubTreeHeight = () => {\n      return subTreeHeight;\n    };\n    const updateSubTreeHeight = delta => {\n      subTreeHeight += delta;\n      cachedIndexVersion = masterIndexVersion;\n      getParent().updateSubTreeHeight(delta);\n    };\n    const getIndexVersion = () => {\n      return masterIndexVersion;\n    };\n    const isCachedAbsoluteIndexValid = () => {\n      return !!cachedAbsoluteIndex && cachedIndexVersion === masterIndexVersion;\n    };\n    const findAbsoluteIndex = () => {\n      if (!isCachedAbsoluteIndexValid()) {\n        let indexRelativeToParent = 0;\n        for (\n          let sibling = getPrevSibling();\n          !!sibling;\n          sibling = sibling.getPrevSibling()\n        ) {\n          indexRelativeToParent += 1 + sibling.getSubTreeHeight();\n        }\n        const parentAbsoluteIndex = getParent().findAbsoluteIndex();\n        cachedAbsoluteIndex = parentAbsoluteIndex + indexRelativeToParent + 1;\n        cachedIndexVersion = masterIndexVersion;\n      }\n      return cachedAbsoluteIndex;\n    };\n    const showSubNodes = subNodes => {\n      if (!getIsVisible() || !getIsExpanded()) {\n        return;\n      }\n      const thisRowIndex = findAbsoluteIndex();\n      createSubNodesRowControllers(subNodes);\n      view.insertNodes(thisRowIndex + subTreeHeight + 1, subNodes);\n      masterIndexVersion++;\n      updateSubTreeHeight(+subNodes.length);\n      view.updateNode(thisRowIndex, node);\n    };\n    const hideSubNodes = () => {\n      if (!getIsVisible() || subTreeHeight === 0) {\n        return;\n      }\n      const thisRowIndex = findAbsoluteIndex();\n      view.removeNodes(thisRowIndex + 1, subTreeHeight);\n      masterIndexVersion++;\n      updateSubTreeHeight(-subTreeHeight);\n      view.updateNode(thisRowIndex, node);\n    };\n    const toggle = () => {\n      if (isExpanded) {\n        collapse();\n      } else {\n        expand();\n      }\n      return {\n        isExpanded\n      };\n    };\n    const expand = () => {\n      if (isExpanded || !node.firstChild) {\n        return;\n      }\n      const subNodes = [];\n      for (\n        let subNode = node.firstChild;\n        !!subNode;\n        subNode = subNode.nextSibling\n      ) {\n        subNodes.push(subNode);\n      }\n      isExpanded = true;\n      showSubNodes(subNodes);\n    };\n    const collapse = () => {\n      isExpanded = false;\n      hideSubNodes();\n    };\n\n    return {\n      getNode,\n      getParent,\n      getPrevSibling,\n      getNextSibling,\n      getFirstChild,\n      getIsExpanded,\n      getIsVisible,\n      getSubTreeHeight,\n      updateSubTreeHeight,\n      getIndexVersion,\n      findAbsoluteIndex,\n      toggle,\n      expand,\n      collapse,\n      showSubNodes\n    };\n  }\n\n  function createRootNodeController(rootNode) {\n    let subTreeHeight = 0;\n    const noop = () => {};\n\n    return {\n      getNode: () => rootNode,\n      getParent: noop,\n      getPrevSibling: noop,\n      getNextSibling: noop,\n      getFirstChild: noop,\n      getIsExpanded: () => true,\n      getIsVisible: () => true,\n      getSubTreeHeight: () => subTreeHeight,\n      updateSubTreeHeight(delta) {\n        subTreeHeight += delta;\n      },\n      getIndexVersion: () => masterIndexVersion,\n      findAbsoluteIndex: () => -1,\n      toggle: noop,\n      expand: noop,\n      collapse: noop,\n      showSubNodes(subNodes) {\n        createSubNodesRowControllers(subNodes);\n        view.insertNodes(subTreeHeight, subNodes);\n        subTreeHeight += subNodes.length;\n      }\n    };\n  }\n\n  function subscriber(insertedNodes) {\n    let currentGroup = undefined;\n\n    for (let i = 0; i < insertedNodes.length; i++) {\n      if (\n        !currentGroup ||\n        currentGroup.parentId !== insertedNodes[i].parent.id\n      ) {\n        beginNewGroup(i);\n      }\n    }\n\n    endCurrentGroup(insertedNodes.length);\n\n    function beginNewGroup(index) {\n      endCurrentGroup(index);\n      currentGroup = {\n        parentId: insertedNodes[index].parent.id,\n        startIndex: index\n      };\n    }\n\n    function endCurrentGroup(index) {\n      if (currentGroup && currentGroup.startIndex < index) {\n        const parentRow = rowById[currentGroup.parentId];\n        if (parentRow) {\n          const nodesInGroup = insertedNodes.slice(\n            currentGroup.startIndex,\n            index\n          );\n          parentRow.showSubNodes(nodesInGroup);\n        }\n      }\n    }\n  }\n\n  function initRootNode() {\n    const rootNode = model.getRootNode();\n    rowById[rootNode.id] = createRootNodeController();\n  }\n}\n\nexport function createTreeGridView(table, columns) {\n  let tbody = document.createElement(\"tbody\");\n  table.appendChild(tbody);\n\n  let controller = undefined;\n  let nodeSelectedCallback = undefined;\n\n  const stringToTextNode = element => {\n    if (typeof element === \"string\") {\n      return document.createTextNode(element);\n    }\n    return element;\n  };\n\n  const renderCell = (node, rowIndex, colIndex, tr, td) => {\n    const tdContents = columns[colIndex].renderCell(node, controller, rowIndex);\n    tdContents\n      .filter(htmlNode => !!htmlNode)\n      .map(stringToTextNode)\n      .forEach(htmlNode => td.appendChild(htmlNode));\n  };\n\n  const attachController = theController => {\n    controller = theController;\n  };\n\n  const updateNode = (index, node) => {\n    const tr = tbody.rows[index];\n    for (let colIndex = 0; colIndex < columns.length; colIndex++) {\n      const td = tr.cells[colIndex];\n      td.innerHTML = \"\";\n      renderCell(node, index, colIndex, tr, td);\n    }\n  };\n\n  const insertNodes = (index, nodes) => {\n    for (let i = 0; i < nodes.length; i++) {\n      const rowIndex = index + i;\n      const tr = tbody.insertRow(index + i);\n      tr.onclick = () => {\n        nodeSelectedCallback && nodeSelectedCallback(nodes[i]);\n      };\n      for (let colIndex = 0; colIndex < columns.length; colIndex++) {\n        const td = tr.insertCell(colIndex);\n        renderCell(nodes[i], rowIndex, colIndex, tr, td);\n      }\n    }\n  };\n\n  const removeNodes = (index, count) => {\n    for (let i = count - 1; i >= 0; i--) {\n      tbody.deleteRow(index + i);\n    }\n  };\n\n  const clearAll = () => {\n    const newTbody = document.createElement(\"tbody\");\n    table.replaceChild(newTbody, tbody);\n    tbody = newTbody;\n    nodeSelectedCallback && nodeSelectedCallback(undefined);\n  };\n\n  const onNodeSelected = callback => {\n    nodeSelectedCallback = callback;\n  };\n\n  return {\n    attachController,\n    updateNode,\n    insertNodes,\n    removeNodes,\n    clearAll,\n    onNodeSelected\n  };\n}\n","export { createCodePath } from \"./codePath\";\nexport {\n  createDefaultScopeManager,\n  trace,\n  getCurrentScope,\n  resetCurrentScope\n} from \"./codePathScopeManager\";\nexport { createCodePathStream } from \"./codePathStream\";\nexport {\n  createCodePathTracer,\n  contextToPlain,\n  plainToContext\n} from \"./codePathTracer\";\nexport { createCodePathModel } from \"./codePathModel\";\nexport { createCodePathSearchModel } from \"./codePathSearchModel\";\nexport { createTreeGridController, createTreeGridView } from \"./treeGrid\";\n"],"sourceRoot":""}