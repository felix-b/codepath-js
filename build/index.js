/*!
 * 
 *   codepath v0.1.0
 *   https://github.com/felix-b/codepath-js
 * 
 *   Copyright (c) Felix Berman (https://github.com/felix-b)
 * 
 *   This source code is licensed under the MIT license found in the
 *   LICENSE file in the root directory of this source tree.
 * 
 */
!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.CodePath=e():t.CodePath=e()}(window,function(){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=25)}([function(t,e,n){"use strict";function r(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}Object.defineProperty(e,"__esModule",{value:!0});var o=n(17);e.BinaryCarrier=o.default;var i=n(18);e.Tags=i;var a=n(9),u=n(14);e.Reference=u.default;var c=n(3);e.Span=c.default;var s=n(11);e.SpanContext=s.default;var f=n(10);e.Tracer=f.Tracer;var p=n(19);e.MockTracer=p.MockTracer,r(n(22)),r(n(13)),r(n(12)),a.initialize()},function(t,e){t.exports=function(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}},function(t,e){t.exports=function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(9),o=function(){function t(){}return t.prototype.context=function(){return this._context()},t.prototype.tracer=function(){return this._tracer()},t.prototype.setOperationName=function(t){return this._setOperationName(t),this},t.prototype.setBaggageItem=function(t,e){return this._setBaggageItem(t,e),this},t.prototype.getBaggageItem=function(t){return this._getBaggageItem(t)},t.prototype.setTag=function(t,e){var n;return this._addTags(((n={})[t]=e,n)),this},t.prototype.addTags=function(t){return this._addTags(t),this},t.prototype.log=function(t,e){return this._log(t,e),this},t.prototype.logEvent=function(t,e){return this._log({event:t,payload:e})},t.prototype.finish=function(t){this._finish(t)},t.prototype._context=function(){return r.spanContext},t.prototype._tracer=function(){return r.tracer},t.prototype._setOperationName=function(t){},t.prototype._setBaggageItem=function(t,e){},t.prototype._getBaggageItem=function(t){},t.prototype._addTags=function(t){},t.prototype._log=function(t,e){},t.prototype._finish=function(t){},t}();e.Span=o,e.default=o},function(t,e){t.exports=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}},function(t,e){function n(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}t.exports=function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}},function(t,e,n){var r=n(23),o=n(2);t.exports=function(t,e){return!e||"object"!==r(e)&&"function"!=typeof e?o(t):e}},function(t,e){function n(e){return t.exports=n=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},n(e)}t.exports=n},function(t,e,n){var r=n(24);t.exports=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&r(t,e)}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(3),o=n(11),i=n(10);e.tracer=null,e.spanContext=null,e.span=null,e.initialize=function(){e.tracer=new i.default,e.span=new r.default,e.spanContext=new o.default}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(12),o=n(9),i=n(3),a=function(){function t(){}return t.prototype.startSpan=function(t,e){if(void 0===e&&(e={}),e.childOf){var n=r.childOf(e.childOf);e.references?e.references.push(n):e.references=[n],delete e.childOf}return this._startSpan(t,e)},t.prototype.inject=function(t,e,n){return t instanceof i.default&&(t=t.context()),this._inject(t,e,n)},t.prototype.extract=function(t,e){return this._extract(t,e)},t.prototype._startSpan=function(t,e){return o.span},t.prototype._inject=function(t,e,n){},t.prototype._extract=function(t,e){return o.spanContext},t}();e.Tracer=a,e.default=a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(){}return t.prototype.toTraceId=function(){return""},t.prototype.toSpanId=function(){return""},t}();e.SpanContext=r,e.default=r},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(13),o=n(14),i=n(3);e.childOf=function(t){return t instanceof i.default&&(t=t.context()),new o.default(r.REFERENCE_CHILD_OF,t)},e.followsFrom=function(t){return t instanceof i.default&&(t=t.context()),new o.default(r.REFERENCE_FOLLOWS_FROM,t)}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.FORMAT_BINARY="binary",e.FORMAT_TEXT_MAP="text_map",e.FORMAT_HTTP_HEADERS="http_headers",e.REFERENCE_CHILD_OF="child_of",e.REFERENCE_FOLLOWS_FROM="follows_from"},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(3),o=function(){function t(t,e){this._type=t,this._referencedContext=e instanceof r.default?e.context():e}return t.prototype.type=function(){return this._type},t.prototype.referencedContext=function(){return this._referencedContext},t}();e.default=o},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=function(t){function e(e){var n=t.call(this)||this;return n._span=e,n}return o(e,t),e.prototype.span=function(){return this._span},e}(n(0).SpanContext);e.MockContext=i,e.default=i},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(0),a=n(15),u=function(t){function e(e){var n=t.call(this)||this;return n._mockTracer=e,n._uuid=n._generateUUID(),n._startMs=Date.now(),n._finishMs=0,n._operationName="",n._tags={},n._logs=[],n}return o(e,t),e.prototype._context=function(){return new a.default(this)},e.prototype._setOperationName=function(t){this._operationName=t},e.prototype._addTags=function(t){for(var e=0,n=Object.keys(t);e<n.length;e++){var r=n[e];this._tags[r]=t[r]}},e.prototype._log=function(t,e){this._logs.push({fields:t,timestamp:e})},e.prototype._finish=function(t){this._finishMs=t||Date.now()},e.prototype.uuid=function(){return this._uuid},e.prototype.operationName=function(){return this._operationName},e.prototype.durationMs=function(){return this._finishMs-this._startMs},e.prototype.tags=function(){return this._tags},e.prototype.tracer=function(){return this._mockTracer},e.prototype._generateUUID=function(){return""+("00000000"+Math.abs(4294967295*Math.random()|0).toString(16)).substr(-8)+("00000000"+Math.abs(4294967295*Math.random()|0).toString(16)).substr(-8)},e.prototype.addReference=function(t){},e.prototype.debug=function(){var t={uuid:this._uuid,operation:this._operationName,millis:[this._finishMs-this._startMs,this._startMs,this._finishMs]};return Object.keys(this._tags).length&&(t.tags=this._tags),t},e}(i.Span);e.MockSpan=u,e.default=u},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(t){this.buffer=t};e.default=r},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SPAN_KIND="span.kind",e.SPAN_KIND_RPC_CLIENT="client",e.SPAN_KIND_RPC_SERVER="server",e.SPAN_KIND_MESSAGING_PRODUCER="producer",e.SPAN_KIND_MESSAGING_CONSUMER="consumer",e.ERROR="error",e.COMPONENT="component",e.SAMPLING_PRIORITY="sampling.priority",e.PEER_SERVICE="peer.service",e.PEER_HOSTNAME="peer.hostname",e.PEER_ADDRESS="peer.address",e.PEER_HOST_IPV4="peer.ipv4",e.PEER_HOST_IPV6="peer.ipv6",e.PEER_PORT="peer.port",e.HTTP_URL="http.url",e.HTTP_METHOD="http.method",e.HTTP_STATUS_CODE="http.status_code",e.MESSAGE_BUS_DESTINATION="message_bus.destination",e.DB_INSTANCE="db.instance",e.DB_STATEMENT="db.statement",e.DB_TYPE="db.type",e.DB_USER="db.user"},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(15);e.MockContext=r.default;var o=n(16);e.MockSpan=o.default;var i=n(20);e.MockTracer=i.default},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(0),a=n(21),u=n(16),c=function(t){function e(){var e=t.call(this)||this;return e._spans=[],e}return o(e,t),e.prototype._startSpan=function(t,e){var n=this._allocSpan();if(n.setOperationName(t),this._spans.push(n),e.references)for(var r=0,o=e.references;r<o.length;r++){var i=o[r];n.addReference(i)}return n._startStack=(new Error).stack,n},e.prototype._inject=function(t,e,n){throw new Error("NOT YET IMPLEMENTED")},e.prototype._extract=function(t,e){throw new Error("NOT YET IMPLEMENTED")},e.prototype._allocSpan=function(){return new u.default(this)},e.prototype.clear=function(){this._spans=[]},e.prototype.report=function(){return new a.default(this._spans)},e}(i.Tracer);e.MockTracer=c,e.default=c},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t){var e=this;this.spans=t,this.spansByUUID={},this.spansByTag={},this.debugSpans=[],this.unfinishedSpans=[],t.forEach(function(t){0===t._finishMs&&e.unfinishedSpans.push(t),e.spansByUUID[t.uuid()]=t,e.debugSpans.push(t.debug());var n=t.tags();Object.keys(n).forEach(function(r){var o=n[r];e.spansByTag[r]=e.spansByTag[r]||{},e.spansByTag[r][o]=e.spansByTag[r][o]||[],e.spansByTag[r][o].push(t)})})}return t.prototype.firstSpanWithTagValue=function(t,e){var n=this.spansByTag[t];if(!n)return null;var r=n[e];return r?r[0]:null},t}();e.MockReport=r,e.default=r},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(10),a=new i.default,u=null,c=new(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.prototype.startSpan=function(){var t=u||a;return t.startSpan.apply(t,arguments)},e.prototype.inject=function(){var t=u||a;return t.inject.apply(t,arguments)},e.prototype.extract=function(){var t=u||a;return t.extract.apply(t,arguments)},e}(i.default));e.initGlobalTracer=function(t){u=t},e.globalTracer=function(){return c}},function(t,e){function n(t){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function r(e){return"function"==typeof Symbol&&"symbol"===n(Symbol.iterator)?t.exports=r=function(t){return n(t)}:t.exports=r=function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":n(t)},r(e)}t.exports=r},function(t,e){function n(e,r){return t.exports=n=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},n(e,r)}t.exports=n},function(t,e,n){"use strict";n.r(e);var r=n(1),o=n.n(r),i=n(0),a=n(4),u=n.n(a),c=n(5),s=n.n(c),f=n(6),p=n.n(f),l=n(7),d=n.n(l),_=n(2),h=n.n(_),v=n(8),y=n.n(v);function g(t,e,n){return new S(t,e,n)}var S=function(t){function e(t,n,r){var i;return u()(this,e),i=p()(this,d()(e).call(this)),o()(h()(i),"_traceId",void 0),o()(h()(i),"_clock",void 0),o()(h()(i),"_scopeManager",void 0),o()(h()(i),"_stream",void 0),o()(h()(i),"_nextSpanId",void 0),i._traceId=t,i._nextSpanId=1,i._clock=r.clock,i._scopeManager=r.scopeManager,i._stream=n,n.writeStartTracer(r.clock.now(),t),i}return y()(e,t),s()(e,[{key:"_startSpan",value:function(t,e){return new b(this,this._clock,this._stream,this._nextSpanId++,t,e)}},{key:"_inject",value:function(t,e,n){}},{key:"_extract",value:function(t,e){return new O("","")}},{key:"getTraceId",value:function(){return this._traceId}},{key:"getCurrentTime",value:function(){return this._clock.now()}}]),e}(i.Tracer),b=function(t){function e(t,n,r,a,c,s){var f;u()(this,e),f=p()(this,d()(e).call(this)),o()(h()(f),"_tracer",void 0),o()(h()(f),"_clock",void 0),o()(h()(f),"_stream",void 0),o()(h()(f),"_selfContext",void 0);var l=t.getTraceId();f._tracer=t,f._clock=n,f._stream=r,f._selfContext=new O(l,a);var _=s&&s.startTime||n.now(),v=function(t){var e=void 0,n=void 0;return t&&t.references&&t.references.forEach(function(t){switch(t.type()){case i.REFERENCE_CHILD_OF:e=t.referencedContext();break;case i.REFERENCE_FOLLOWS_FROM:n=t.referencedContext()}}),{childOf:e,followsFrom:n}}(s),y=v.childOf,g=v.followsFrom;return r.writeStartSpan(_,l,a,c,{childOf:E(y),followsFrom:E(g)},s.tags),f}return y()(e,t),s()(e,[{key:"_context",value:function(){return this._selfContext}},{key:"_tracer",value:function(){return this._tracer}},{key:"_setOperationName",value:function(t){throw new Error("Not supported: setOperationName")}},{key:"_setBaggageItem",value:function(t,e){throw new Error("Not supported: setBaggageItem")}},{key:"_getBaggageItem",value:function(t){}},{key:"_addTags",value:function(t){var e=E(this._selfContext),n=e.traceId,r=e.spanId;this._stream.writeSpanTags(this._clock.now(),n,r,t)}},{key:"_log",value:function(t,e){var n=e||this._clock.now(),r=E(this._selfContext),o=r.traceId,i=r.spanId;this._stream.writeLog(n,o,i,t.$id,t)}},{key:"_finish",value:function(t){var e=t||this._clock.now(),n=E(this._selfContext),r=n.traceId,o=n.spanId;this._stream.writeEndSpan(e,r,o)}}]),e}(i.Span),O=function(t){function e(t,n){var r;return u()(this,e),r=p()(this,d()(e).call(this)),o()(h()(r),"_traceId",void 0),o()(h()(r),"_spanId",void 0),r._traceId=t,r._spanId=n,r}return y()(e,t),s()(e,[{key:"toTraceId",value:function(){return this._traceId}},{key:"toSpanId",value:function(){return this._spanId}}]),e}(i.SpanContext);function E(t){if(t)return{traceId:t.toTraceId(),spanId:t.toSpanId()}}function T(){var t=[];return{writeStartTracer:function(e,n,r){t.push({time:e,token:"StartTracer",traceId:n,tags:r||{}})},writeStartSpan:function(e,n,r,o,i,a){var u=i.childOf,c=i.followsFrom;t.push({time:e,token:"StartSpan",traceId:n,spanId:r,childOf:u,followsFrom:c,messageId:o,tags:a||{}})},writeEndSpan:function(e,n,r,o){t.push({time:e,token:"EndSpan",traceId:n,spanId:r,tags:o||{}})},writeLog:function(e,n,r,o,i){t.push({time:e,token:"Log",traceId:n,spanId:r,messageId:o,tags:i||{}})},writeSpanTags:function(e,n,r,o){t.push({time:e,token:"SpanTags",traceId:n,spanId:r,tags:o||{}})},peekEntries:function(){return t},takeEntries:function(){var e=t;return t=[],e}}}function m(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),n.push.apply(n,r)}return n}function I(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?m(n,!0).forEach(function(e){o()(t,e,n[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):m(n).forEach(function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))})}return t}var w={debug:0,event:1,warning:2,error:3,critical:4},x=function(){return{now:function(){return(new Date).getTime()}}},P=function(){var t=void 0,e=void 0;return{getActiveTracer:function(){return t},getActiveSpan:function(){return e},setActiveTracer:function(e){t=e},setActiveSpan:function(t){e=t}}},C=function(t,e){return g("webuser".concat(e.clock.now()),t,e)};function M(t){var e=t&&t.clock||x(),n=t&&t.scopeManager||P(),r=t&&t.tracerFactory||C,o=t&&t.outputStream||T(),a={},u=function(t){var e=n.getActiveSpan();if(e)e.log(t);else{var r=activeTracer.startSpan("unknown-root");r.log(t),r.finish()}},c=function(t,o,u,c){var s=function(){var t=n.getActiveTracer();if(t)return t;var o=r({clock:e,scopeManager:n,tracerFactory:r});return n.setActiveTracer(o),o}(),f=function(t){if(t)return t;var e=n.getActiveSpan();return e?e.context():void 0}(u),p={references:f&&[new i.Reference(c,f)],tags:o},l=s.startSpan(t,p);return n.setActiveSpan(l),a[l.context().spanId]={span:l,options:p},l};n.setActiveTracer(r(o,{clock:e,scopeManager:n,tracerFactory:r}));var s={logDebug:function(t,e){u(I({$id:t,level:w.debug},e))},logEvent:function(t,e){u(I({$id:t,level:w.event},e))},logWarning:function(t,e){u(I({$id:t,level:w.warning},e))},logError:function(t,e){u(I({$id:t,level:w.error},e))},logCritical:function(t,e){u(I({$id:t,level:w.critical},e))},spanChild:function(t,e,n){return c(t,e,n,i.REFERENCE_CHILD_OF)},spanFollower:function(t,e,n){return c(t,e,n,i.REFERENCE_FOLLOWS_FROM)},finishSpan:function(t){var e=n.getActiveSpan();if(!e)throw new Error("Current scope has no active span");e.finish(),e.doesNotifyTracerOnFinish||s.notifySpanFinished(e)},notifySpanFinished:function(t){var e=t.context(),r=e.spanId,o=e.traceId,i=a[r];if(!i)throw new Error("Trace span not found: id [".concat(r,"]"));var u=i.options.references&&i.options.references[0].referencedContext();if(u&&u.traceId===o){var c=a[u.spanId];c&&n.setActiveSpan(c.span)}delete a[r]}};return{input:s,output:o}}function N(){var t,e,n=(t={},e=function(e){var n=t[e];if(n)return n;var r,o=(r={},{getSpanNode:function(t){return r[t]},setSpanNode:function(t,e){r[t]=e}});return t[e]=o,o},{getSpanNode:function(t,n){return e(t).getSpanNode(n)},setSpanNode:function(t,n,r){return e(t).setSpanNode(n,r)}}),r={id:0,entry:void 0,parent:void 0,firstChild:void 0,lastChild:void 0,prevSibling:void 0,nextSibling:void 0},o=1,i=void 0,a=function(t){var e=t.traceId,i=t.spanId,a=function(t){var e=function(t){return"StartSpan"===t.token?t.childOf||t.followsFrom:t}(t);if(e){var o=n.getSpanNode(e.traceId,e.spanId);if(o)return o;console.warn("CODEPATH.MODEL>","Span node not found",e)}return r}(t),u={id:o++,entry:t,parent:a,firstChild:void 0,lastChild:void 0,prevSibling:void 0,nextSibling:void 0};return function(t,e){e.lastChild?(t.prevSibling=e.lastChild,e.lastChild.nextSibling=t):e.firstChild=t,e.lastChild=t}(u,a),"StartSpan"===t.token&&n.setSpanNode(e,i,u),u};return{getRootNode:function(){return r},publish:function(t){var e=t.filter(function(t){return"EndSpan"!==t.token&&"StartTracer"!==t.token}).map(a);i&&i(e)},subscribe:function(t){i=t},clearAllRows:function(){}}}function k(t,e){var n,r={},o=1,i={toggle:function(t){r[t].toggle()},expand:function(t){r[t].expand()},collapse:function(t){r[t].collapse()},clearAll:function(){}};return n=e.getRootNode(),r[n.id]=function(e){var n=0,r=function(){};return{getNode:function(){return e},getParent:r,getPrevSibling:r,getNextSibling:r,getFirstChild:r,getIsExpanded:function(){return!0},getIsVisible:function(){return!0},getSubTreeHeight:function(){return n},updateSubTreeHeight:function(t){n+=t},getIndexVersion:function(){return o},findAbsoluteIndex:function(){return-1},toggle:r,expand:r,collapse:r,showSubNodes:function(e){a(e),t.insertNodes(n,e),n+=e.length}}}(),t.attachController(i),e.subscribe(function(t){for(var e=void 0,n=0;n<t.length;n++)e&&e.parentId===t[n].parent.id||o(n);function o(n){i(n),e={parentId:t[n].parent.id,startIndex:n}}function i(n){e&&e.startIndex<n&&r[e.parentId].showSubNodes(t.slice(e.startIndex,n))}i(t.length)}),i;function a(t){var e=!0,n=!1,o=void 0;try{for(var i,a=t[Symbol.iterator]();!(e=(i=a.next()).done);e=!0){var c=i.value,s=u(c);r[c.id]=s}}catch(t){n=!0,o=t}finally{try{e||null==a.return||a.return()}finally{if(n)throw o}}}function u(e){var n=!1,i=0,u=void 0,c=o,s=function(){return r[e.parent.id]},f=function(){return e.prevSibling?r[e.prevSibling.id]:void 0},p=function(){return n},l=function(){var t=s();return t.getIsVisible()&&t.getIsExpanded()},d=function(t){i+=t,c=o,s().updateSubTreeHeight(t)},_=function(){if(!u||c!==o){for(var t=0,e=f();e;e=e.getPrevSibling())t+=1+e.getSubTreeHeight();var n=s().findAbsoluteIndex();u=n+t+1,c=o}return u},h=function(e){l()&&p()&&(a(e),t.insertNodes(_()+i+1,e),o++,d(+e.length))},v=function(){if(!n&&e.firstChild){for(var t=[],r=e.firstChild;r;r=r.nextSibling)t.push(r);n=!0,h(t)}},y=function(){n=!1,l()&&0!==i&&(t.removeNodes(_()+1,i),o++,d(-i))};return{getNode:function(){return e},getParent:s,getPrevSibling:f,getNextSibling:function(){return e.nextSibling?r[e.nextSibling.id]:void 0},getFirstChild:function(){return e.firstChild?r[e.firstChild.id]:void 0},getIsExpanded:p,getIsVisible:l,getSubTreeHeight:function(){return i},updateSubTreeHeight:d,getIndexVersion:function(){return o},findAbsoluteIndex:_,toggle:function(){n?y():v()},expand:v,collapse:y,showSubNodes:h}}}function j(t,e){var n=document.createElement("tbody");t.appendChild(n);var r=void 0,o=function(t){return"string"==typeof t?document.createTextNode(t):t};return{attachController:function(t){r=t},insertNodes:function(t,i){for(var a=0;a<i.length;a++)for(var u=n.insertRow(t+a),c=function(n){var c=u.insertCell(n);e[n].renderCell(i[a],r,t+a).map(o).forEach(function(t){return c.appendChild(t)})},s=0;s<e.length;s++)c(s)},removeNodes:function(t,e){for(var r=e-1;r>=0;r--)n.deleteRow(t+r)}}}n.d(e,"createCodePath",function(){return M}),n.d(e,"createDefaultScopeManager",function(){return P}),n.d(e,"createCodePathStream",function(){return T}),n.d(e,"createCodePathTracer",function(){return g}),n.d(e,"createCodePathModel",function(){return N}),n.d(e,"createTreeGridController",function(){return k}),n.d(e,"createTreeGridView",function(){return j})}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,